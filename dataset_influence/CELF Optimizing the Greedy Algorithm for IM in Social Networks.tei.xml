<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 D:\grobid-master\grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.1-SNAPSHOT" ident="GROBID" when="2018-07-16T23:49+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">CELF++: Optimizing the Greedy Algorithm for Influence Maximization in Social Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>March 28-April 1, 2011</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amit</forename><surname>Goyal</surname></persName>
							<email>goyal@cs.ubc.ca</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Dept. of Computer Science</orgName>
								<orgName type="department" key="dep2">Dept. of Computer Science</orgName>
								<orgName type="institution">University of British Columbia Vancouver</orgName>
								<address>
									<region>BC</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei</forename><forename type="middle">Lu</forename><surname>Laks</surname></persName>
							<email>laks@cs.ubc.ca</email>
							<affiliation key="aff1">
								<orgName type="department">Dept. of Computer Science</orgName>
								<orgName type="institution">University of British Columbia Vancouver</orgName>
								<address>
									<region>BC</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">S</forename><surname>Lakshmanan</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">University of British Columbia Vancouver</orgName>
								<address>
									<region>BC</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">CELF++: Optimizing the Greedy Algorithm for Influence Maximization in Social Networks</title>
					</analytic>
					<monogr>
						<title level="m">WWW 2011 -Poster</title>
						<meeting> <address><addrLine>Hyderabad, India</addrLine></address>
						</meeting>
						<imprint>
							<date type="published">March 28-April 1, 2011</date>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>H28 [Database Management]: Database Applications -Data Mining General Terms: Algorithms</term>
					<term>Performance Keywords: Social networks</term>
					<term>Influence Propagation</term>
					<term>Viral marketing</term>
					<term>Greedy Algorithm</term>
					<term>Submodularity</term>
					<term>CELF</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Kempe et al. [4] (KKT) showed the problem of influence maximization is NP-hard and a simple greedy algorithm guarantees the best possible approximation factor in PTIME. However, it has two major sources of inefficiency. First, finding the expected spread of a node set is #P-hard. Second, the basic greedy algorithm is quadratic in the number of nodes. The first source is tackled by estimating the spread using Monte Carlo simulation or by using heuristics [4, 6, 2, 5, 1, 3]. Leskovec et al. [6] proposed the CELF algorithm for tackling the second. In this work, we propose CELF++ and empirically show that it is 35-55% faster than CELF.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>In influence maximization, we are given a network G with pairwise user influence probabilities (as edge labels) and a number k, and want to find a set S of k users (nodes) such that the expected spread of influence (spread for short) is maximized. In their seminal work <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr">Kempe et al. (KKT)</ref> studied this problem, focusing on two fundamental propagation models -Linear Threshold Model (LT) and Independent Cascade Model (IC). They showed, under both models, the problem is NP-hard and a simple greedy algorithm successively selecting the node with the maximum marginal influence spread approximates the optimum solution within a factor of (1 ? 1/e). This is due to the nice properties of monotonocity and submodularity that the spread function exhibits under these models. In terms of spread, monotonocity says as more neighbors of some arbitrary node u gets active, the probability of u getting active increases. Submodularity says the marginal gain of a new node shrinks as the set grows. Function f is submodular iff</p><formula xml:id="formula_0">f (S ¡È {w}) ? f (S) ¡Ý f (T ¡È {w}) ? f (T ) whenever S ? T .</formula><p>A major limitation of the simple greedy algorithm is twofold: (i) The algorithm requires repeated computes of the spread function for various seed sets. The problem of computing the spread under both IC and LT models is #P-hard <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b2">3]</ref>. As a result, Monte-Carlo simulations are run by KKT for sufficiently many times to obtain an accurate estimate, resulting in very long computation time. (ii) In each iteration, the simple greedy algorithm searches all the nodes in the graph as a potential candidate for next seed node. As a result, this algorithm entails a quadratic number of steps in terms of the number of nodes.</p><p>Considerable work has been done on tackling the first issue, by using efficient heuristics for estimating the spread <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b0">1,</ref><ref type="bibr" target="#b2">3]</ref> to register huge gains on this front. Relatively little work has been done on improving the quadratic nature of the greedy algorithm. The most notable work is <ref type="bibr" target="#b5">[6]</ref>, where submodularity is exploited to develop an efficient algorithm called CELF, based on a "lazy-forward" optimization in selecting seeds. The idea is that the marginal gain of a node in the current iteration cannot be better than its marginal gain in the previous iterations. CELF maintains a table u, ¦¤u(S) sorted on ¦¤u(S) in decreasing order, where S is the current seed set and ¦¤u(S) is the marginal gain of u w.r.t S. ¦¤u(S) is re-evaluated only for the top node at a time and if needed, the table is resorted. If a node remains at the top, it is picked as the next seed. Leskovec et al.</p><p>[6] empirically shows that CELF dramatically improves the efficiency of the greedy algorithm.</p><p>In this work, we introduce CELF++ that further optimizes CELF by exploiting submodularity. Our experiments show that it improves the efficiency of CELF by 35-55%. Since the optimization introduced in CELF++ is orthogonal to the method used for estimating the spread, our idea can be combined with the heuristic approaches that are based on the greedy algorithm to obtain highly scalable algorithms for influence maximization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">CELF++</head><p>Copyright is held by the author/owner(s). Algorithm 1 describes the CELF++ algorithm. We use ¦Ò(S) to denote the spread of seed set S. We maintain a heap Q with nodes corresponding to users in the network G. The node of Q corresponding to user u stores a tuple of the form u.mg1, u.prev best, u.mg2, u.flag. Here u.mg1 = ¦¤u(S), the marginal gain of u w.r.t. the current seed set S; u.prev best is the node that has the maximum marginal gain among all the users examined in the current iteration, before user u; u.mg2 = ¦¤u(S ¡È {prev best}), and u.f lag is the iteration number when u.mg1 was last updated. The idea is that if the node u.prev best is picked as a seed in the current iteration, we don't need to recompute the marginal gain of u w.r.t (S ¡È {prev best}) in the next iteration.</p><p>It is important to note that in addition to computing ¦¤u(S), it is not necessary to compute ¦¤u(S ¡È {prev best}) from scratch. More precisely, the algorithm can be implemented in an efficient manner such that both ¦¤u(S) and ¦¤u(S ¡È {prev best}) are evaluated simultaneously in a single iteration of Monte Carlo simulation (which typically contains 10,000 runs). In that sense, the extra overhead is relatively insignificant compared to the huge runtime gains we can achieve, as we will show from our experiments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Dataset</head><p>Running u.mg1 = ¦Ò({u}); u.prev best = cur best; u.mg2 = ¦Ò({u, cur best}); u.f lag = 0.</p><note type="other">time (min) Avg. # node lookups CELF CELF++ Gain CELF CELF++ Gain Hept</note></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4:</head><p>Add u to Q. Update cur best based on mg1.</p><p>5: while |S| &lt; k do 6: u = top (root) element in Q.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7:</head><p>if u.f lag == |S| then</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>8:</head><p>S ¡û S ¡È {u}; Q ¡û Q ? {u}; last seed = u.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>9:</head><p>continue;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>10:</head><p>else if u.prev best == last seed then</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>11:</head><p>u.mg1 = u.mg2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>12:</head><p>else</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>13:</head><p>u.mg1 = ¦¤u(S); u.prev best = cur best; u.mg2 = ¦¤u(S ¡È {cur best}).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>14:</head><p>u.f lag = |S|; Update cur best.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>15:</head><p>Reinsert u into Q and heapify.</p><p>In addition to the data structure Q, the algorithm uses the variables S to denote the current seed set, last seed to track the id of last seed user picked by the algorithm, and cur best to track the user having the maximum marginal gain w.r.t. S over all users examined in the current iteration. The algorithm starts by building the heap Q initially (lines 2-4). Then, it continues to select seeds until the budget k is exhausted. As in CELF, we look at the root element u of Q and if u.f lag is equal to the size of the seed set, we pick u as the seed as this indicates that u.mg1 is actually ¦¤u(S) (lines 6-9). The optimization of CELF++ comes from lines 10-11 where we update u.mg1 without recomputing the marginal gain. Clearly, this can be done since u.mg2 has already been computed efficiently w.r.t. the last seed node picked. If none of the above cases applies, we recompute the marginal gain of u (line 12-13).</p><p>The results are shown in <ref type="table">Table 1</ref>. We use WC (weighted cascade) to refer to the case when the probabilities are non-uniform and IC for the uniform probability 0.1 setting. We only show the results corresponding to NetHEPT WC, NetHEPT IC, and NetPHY WC for brevity. The results for NetPHY IC are similar. In these settings, we found that computing u.mg2 for all nodes in the first iteration results in large overhead. So, we apply CELF++ starting from the second iteration. Notice that the optimization behind CELF++ can be applied starting from any iteration. As can be seen, CELF++ is significantly faster than CELF. This is due to the fact that the average number of "spread computations" per iteration is significantly lower. Since we apply the optimization starting from the second iteration, we report the average number of nodes examined starting from the third iteration.</p><p>Memory Consumption: Although CELF++ maintains a larger data structure to store the look-ahead marginal gains (u.mg2) of each node, the increase of the memory consumption is insignificant. For instance, CELF consumes 21.9 MB for NetHEPT and 39.7 MB for NetPHY, while CELF++ uses 22.4 MB and 41.2 MB respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">CONCLUSIONS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">EXPERIMENTS</head><p>In this work, we presented CELF++, a highly optimized approach based on the CELF algorithm <ref type="bibr" target="#b5">[6]</ref> in order to further improve the naive greedy algorithm for influence maximization in social networks <ref type="bibr" target="#b3">[4]</ref>. CELF++ exploits the property of submodularity of the spread function for influence propagation models (e.g., Linear Threshold Model and Independent Cascade Model) to avoid unnecessary re-computations of marginal gains incurred by CELF. Our empirical studies on real world social network datasets show that CELF++ works effectively and efficiently, resulting in significant improvements in terms of both running time and the average number of node look-ups.</p><p>We use two real world data sets consisting of academic collaboration networks: NetHEPT and NetPHY, both extracted from arXiv 1 . NetHEPT is taken from the "High Energy Physics -Theory" section and has 15K nodes and 32K unique edges. NetPHY is taken from the full "Physics" section and has 37K nodes and 174K unique edges. The graphs are undirected, however we make them directed by taking for each edge the arcs in both the directions. We consider the IC model and assign the influence probability to arcs using two different settings, following previous works (e.g., see <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b0">1]</ref>). In the first setting, for an arc (v, u) we set the influence probability as pv,u = 1/din(u), where din is the in-degree of the node u. In the second setting, we assign a uniform probability of 0.1 to all arcs. In all the experiments, we run 10,000 Monte Carlo simulations to estimate the spread.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>WWW 2011 ,</head><label>2011</label><figDesc>March 28-April 1, 2011, Hyderabad, India. ACM 978-1-4503-0637-9/11/03.</figDesc></figure>

			<note place="foot" n="1"> http://www.arXiv.org</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Scalable influence maximization for prevalent viral marketing in large-scale social networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">KDD</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Efficient influence maximization in social networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Yang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Scalable influence maximization in social networks under the linear threshold model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDM 2010</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Maximizing the spread of influence through a social network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kempe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kleinberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tardos</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Tractable models for information diffusion in social networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kimura</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Saito</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Cost-effective outbreak detection in networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Leskovec</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">KDD</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
