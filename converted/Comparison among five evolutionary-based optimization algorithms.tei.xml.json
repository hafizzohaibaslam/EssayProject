[
     {
          "head": {
               "n": "0",
               "text": "abstract",
               "type": "abstract"
          },
          "paragraphs": [
               "Evolutionary algorithms (EAs) are stochastic search methods that mimic the natural biological evolution and/or the social behavior of species. Such algorithms have been developed to arrive at near-optimum solutions to large-scale optimization problems, for which traditional mathematical techniques may fail. This paper compares the formulation and results of five recent evolutionary-based algorithms: genetic algorithms, memetic algorithms, particle swarm, ant-colony systems, and shuffled frog leaping. A brief description of each algorithm is presented along with a pseudocode to facilitate the implementation and use of such algorithms by researchers and practitioners. Benchmark comparisons among the algorithms are presented for both continuous and discrete optimization problems, in terms of processing time, convergence speed, and quality of the results. Based on this comparative analysis, the performance of EAs is discussed along with some guidelines for determining the best operators for each algorithm. The study presents sophisticated ideas in a simplified form that should be beneficial to both practitioners and researchers involved in solving optimization problems. q"
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 0,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "1.",
               "text": "Introduction",
               "type": "introduction"
          },
          "paragraphs": [
               "The difficulties associated with using mathematical optimization on large-scale engineering problems have contributed to the development of alternative solutions. Linear programming and dynamic programming techniques, for example, often fail (or reach local optimum) in solving NP-hard problems with large number of variables and non-linear objective functions . To overcome these problems, researchers have proposed evolutionary-based algorithms for searching near-optimum solutions to problems.",
               "Evolutionary algorithms (EAs) are stochastic search methods that mimic the metaphor of natural biological evolution and/or the social behavior of species. Examples include how ants find the shortest route to a source of food and how birds find their destination during migration. The behavior of such species is guided by learning, adaptation, and evolution . To mimic the efficient behavior of these species, various researchers have developed computational systems that seek fast and robust solutions to complex optimization problems. The first evolutionary-based technique introduced in the literature was the genetic algorithms (GAs) . GAs were developed based on the Darwinian principle of the 'survival of the fittest' and the natural process of evolution through reproduction. Based on its demonstrated ability to reach near-optimum solutions to large problems, the GAs technique has been used in many applications in science and engineering . Despite their benefits, GAs may require long processing time for a nearoptimum solution to evolve. Also, not all problems lend themselves well to a solution with GAs .",
               "In an attempt to reduce processing time and improve the quality of solutions, particularly to avoid being trapped in local optima, other EAs have been introduced during the past 10 years. In addition to various GA improvements, recent developments in EAs include four other techniques inspired by different natural processes: memetic algorithms (MAs) , particle swarm optimization (PSO) , antcolony systems , and shuffled frog leaping (SFL) . A schematic diagram of the natural processes that the five algorithms mimic is shown in .",
               "In this paper, the five EAs presented in are reviewed and a pseudocode for each algorithm is presented to facilitate its implementation. Performance comparison among the five algorithms is then presented. Guidelines are then presented for determining the proper parameters to use with each algorithm."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 1,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "2.",
               "text": "Five evolutionary algorithms",
               "type": "introduction"
          },
          "paragraphs": [
               "In general, EAs share a common approach for their application to a given problem. The problem first requires some representation to suit each method. Then, the evolutionary search algorithm is applied iteratively to arrive at a near-optimum solution. A brief description of the five algorithms is presented in the following subsections."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 2,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "2.1.",
               "text": "Genetic algorithms",
               "type": "introduction"
          },
          "paragraphs": [
               "GAs are inspired by biological systems' improved fitness through evolution . A solution to a given problem is represented in the form of a string, called 'chromosome', consisting of a set of elements, called 'genes', that hold a set of values for the optimization variables .",
               "GAs work with a random population of solutions (chromosomes). The fitness of each chromosome is determined by evaluating it against an objective function. To simulate the natural survival of the fittest process, best chromosomes exchange information (through crossover or mutation) to produce offspring chromosomes. The offspring solutions are then evaluated and used to evolve the population if they provide better solutions than weak population members. Usually, the process is continued for a large number of generations to obtain a best-fit (nearoptimum) solution. More details on the mechanism of GAs can be found in Goldberg and Al-Tabtabai and Alex .",
               "A pseudocode for the GAs algorithm is shown in Appendix A. Four main parameters affect the performance of GAs: population size, number of generations, crossover rate, and mutation rate. Larger population size (i.e. hundreds of chromosomes) and large number of generations (thousands) increase the likelihood of obtaining a global optimum solution, but substantially increase processing time.",
               "Crossover among parent chromosomes is a common natural process and traditionally is given a rate that ranges from 0.6 to 1.0. In crossover, the exchange of parents' information produces an offspring, as shown in . As opposed to crossover, mutation is a rare process that resembles a sudden change to an offspring. This can be done by randomly selecting one chromosome from the population and then arbitrarily changing some of its information. The benefit of mutation is that it randomly introduces new genetic material to the evolutionary process, perhaps thereby avoiding stagnation around local minima. A small mutation rate less than 0.1 is usually used .",
               "The GA used in this study is steady state (an offspring replaces the worst chromosome only if is better than it) and real coded (the variables are represented in real numbers). The main parameters used in the GA procedure are population size, number of generations, crossover rate and mutation rate.",
               "The number of swaps and consequently the size of the neighborhood grow quadratically with the chromosome length (problem variables). In order to reduce processing time, suggested stopping the pairwise interchange after performing the first swap that enhances the objective function of the current chromosome. The local-search algorithm, however, can be designed to suit the problem nature. For example, another local search can be conducted by adding or subtracting an incremental value from every gene and testing the chromosome's performance. The change is kept if the chromosome's performance improves; otherwise, the change is ignored. A pseudocode of this modified local search is given in Appendix C. As discussed, the parameters involved in MAs are the same four parameters used in GAs: population size, number of generations, crossover rate, and mutation rate in addition to a local-search mechanism."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 3,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "2.4.",
               "text": "Ant-colony optimization",
               "type": "introduction"
          },
          "paragraphs": [
               "Similar to PSO, ant-colony optimization (ACO) algorithms evolve not in their genetics but in their social behavior. ACO was developed by Dorigo et al. based on the fact that ants are able to find the shortest route between their nest and a source of food. This is done using pheromone concentration Dt ij is calculated as :",
               "where R is a constant called the pheromone reward factor; and fitness k is the value of the objective function (solution performance) calculated for ant k. It is noted that the amount of pheromone gets higher as the solution improves. Therefore, for minimization problems, Eq. shows the pheromone change as proportional to the inverse of the fitness. In maximization problems, on the other hand, the fitness value itself can be directly used.",
               "Once the pheromone is updated after an iteration, the next iteration starts by changing the ants' paths (i.e. associated variable values) in a manner that respects pheromone concentration and also some heuristic preference. As such, an ant k at iteration t will change the value for each variable according to the following probability :",
               "For S-dimensional problems (S variables), a frog i is represented as X i Z(x i1 , x i2 ,., x iS ). Afterwards, the frogs are sorted in a descending order according to their fitness. Then, the entire population is divided into m memeplexes, each containing n frogs (i.e. PZm!n). In this process, the first frog goes to the first memeplex, the second frog goes to the second memeplex, frog m goes to the mth memeplex, and frog mC1 goes back to the first memeplex, etc.",
               "Within each memeplex, the frogs with the best and the worst fitnesses are identified as X b and X w , respectively. Also, the frog with the global best fitness is identified as X g . Then, a process similar to PSO is applied to improve only the frog with the worst fitness (not all frogs) in each cycle. Accordingly, the position of the frog with the worst fitness is adjusted as follows:",
               "where P ij (k, t)Zprobability that option l ij is chosen by ant k for variable i at iteration t; t ij (t)Zpheromone concentration associated with option l ij at iteration t; h ij Zheuristic factor for preferring among available options and is an indicator of how good it is for ant k to select option l ij (this heuristic factor is generated by some problem characteristics and its value is fixed for each option l ij ); and a and b are exponent parameters that control the relative importance of pheromone concentration versus the heuristic factor . Both a and b can take values greater than zero and can be determined by trial and error. Based on the previous discussion, the main parameters involved in ACO are: number of ants m; number of iterations t; exponents a and b; pheromone evaporation rate r; and pheromone reward factor R.",
               "where rand( ) is a random number between 0 and 1; and D max is the maximum allowed change in a frog's position. If this process produces a better solution, it replaces the worst frog. Otherwise, the calculations in Eqs. and are repeated but with respect to the global best frog (i.e. X g replaces X b ). If no improvement becomes possible in this case, then a new solution is randomly generated to replace that frog. The calculations then continue for a specific number of iterations . Accordingly, the main parameters of SFL are: number of frogs P; number of memeplexes; number of generation for each memeplex before shuffling; number of shuffling iterations; and maximum step size."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 4,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "2.5.",
               "text": "Shuffled frog leaping algorithm",
               "type": "introduction"
          },
          "paragraphs": [
               "The SFL algorithm, in essence, combines the benefits of the genetic-based MAs and the social behavior-based PSO algorithms. In the SFL, the population consists of a set of frogs (solutions) that is partitioned into subsets referred to as memeplexes. The different memeplexes are considered as different cultures of frogs, each performing a local search. Within each memeplex, the individual frogs hold ideas, that can be influenced by the ideas of other frogs, and evolve through a process of memetic evolution. After a defined number of memetic evolution steps, ideas are passed among memeplexes in a shuffling process . The local search and the shuffling processes continue until defined convergence criteria are satisfied .",
               "As described in the pseudocode of Appendix F, an initial population of P frogs is created randomly.",
               "All the EAs described earlier have been coded using the Visual Basic programming language and all experiments took place on a 1.8 GHz AMD Laptop machine. The performance of the five EAs is compared using two benchmark problems for continuous optimization and a third problem for discrete optimization. A description of these test problems is given in the following."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 5,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "3.1.",
               "text": "Continuous optimization",
               "type": "introduction"
          },
          "paragraphs": [
               "Two well-known continuous optimization problems are used to test four of the EAs: F8 (Griewank's) function and the F10 function. Details of these functions are as follows."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 6,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "3.1.1.",
               "text": "F8 (Griewank's function)",
               "type": "introduction"
          },
          "paragraphs": [
               "The objective function to be optimized is a scalable, nonlinear, and non-separable function that may take any number of variables (x i s), i.e.",
               "Similar to the F8 function, the global optimum solution for this function is known to be zero when all N variables equal zero, for the variable values ranging from K100 to 100.",
               "The summation term of the F8 function (Eq. ) includes a parabolic shape while the cosine function in the product term creates waves over the parabolic surface. These waves create local optima over the solution space . The F8 function can be scaled to any number of variables N. The values of each variable are constrained to a range (K512 to 511). The global optimum (minimum) solution for this function is known to be zero when all N variables equal zero."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 7,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "3.1.2.",
               "text": "F10 function",
               "type": "introduction"
          },
          "paragraphs": [
               "This function is non-linear, non-separable, and involves two variables x and y, i.e.",
               "To scale this function (Eq. ) to any number of variables, an extended EF10 function is created using the following relation, ,",
               "Accordingly, the extended F10 function is:",
               "In this section, a time-cost trade-off (TCT) construction management problem is used to compare among the five EAs with respect to their ability to solve discrete optimization problems. The problem relates to an 18-activity construction project that was described in Ref. . The activities, their predecessors, and durations are presented in along with five optional methods of construction that vary from cheap and slow (option 5) to fast and expensive (option 1). The 18 activities were input to a project management software (Microsoft Project) with activity durations being set to those of option 5 (least costs and longest durations among the five options). The total direct cost of the project in this case is $99,740 (sum of all activities' costs for option 5) with the project duration being 169 days (respecting the precedence relations in ). The indirect cost of $500/day was then added to obtain a total project cost of $184,240.",
               "With the initial schedule exceeding a desired deadline of 110-days, it is required to search for the optimum set of construction options that meet the deadline at minimum total cost. In this problem, the decision variables are the different methods of construction possible for each activity (i.e. five discrete options, 1-5, with associated durations and costs). The objective function is to minimize the total project cost (direct and indirect) and is formulated as follows:",
               "where nZnumber of activities; C ij Zdirect cost of activity i using its method of construction j; TZtotal project duration; and IZdaily indirect cost. To facilitate the optimization using the different EAs, macro programs of the 5 EAs were written using the VBA language that comes with the Microsoft Project software. The data in were stored in one of the tables associated with the software. When any one of the EA routines is activated, the evolutionary process selects one of the five construction options to set the activities' durations and costs. Accordingly, the project's total cost (objective function) and duration changes. The evolutionary process then continues to attempt to optimize the objective function."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 8,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "3.3.3.",
               "text": "Particle swarm optimization",
               "type": "introduction"
          },
          "paragraphs": [
               "Upon experimentation, the suitable numbers of particles and generations were found to be 40 and 10,000, respectively. Also, the maximum velocity was set as 20 for the continuous problems and 2 for the discrete problem. The inertia weight factor u was also set as a time-variant linear function decreasing with the increase of number of generations where, at any generation i, u Z 0:4 C 0:8 !?number of generations K i?= ?number of generations K 1? ? 15? such that uZ1.2 and 0.4 at the first and last generation, respectively."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 9,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "3.3.",
               "text": "Parameter settings for evolutionary algorithms",
               "type": "introduction"
          },
          "paragraphs": [
               "As discussed earlier, each algorithm has its own parameters that affect its performance in terms of solution quality and processing time. To obtain the most suitable parameter values that suit the test problems, a large number of experiments were conducted. For each algorithm, an initial setting of the parameters was established using values previously reported in the literature . Then, the parameter values were changed one by one and the results were monitored in terms of the solution quality and speed. The final parameter values adopted for each of the five EAs are given in the following."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 10,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "3.3.4.",
               "text": "Ant-colony optimization",
               "type": "introduction"
          },
          "paragraphs": [
               "As the ACO algorithm is suited to discrete problems alone, no experiments were done using it for the F8 and F10 test functions. However, the TCT discrete problem was used for experimentation with the ACO. After extensive experimentation, 30 ants and 100 iterations were found suitable. Also, the other parameters were set as follows: aZ 0.5; bZ2.5; r (pheromone evaporation rate)Z0.4; and R (reward factor depends on problem nature)Z10."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 11,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "3.3.5.",
               "text": "Shuffled frog leaping",
               "type": "introduction"
          },
          "paragraphs": [
               "Different settings were experimented with to determine suitable values for parameters to solve the test problems using the SFL algorithm. A population of 200 frogs, 20 memeplexes, and 10 iterations per memeplex were found suitable to obtain good solutions."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 12,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "3.3.1.",
               "text": "Genetic algorithms",
               "type": "introduction"
          },
          "paragraphs": [
               "The crossover probability (C P ) and the mutation probability (M P ) were set to 0.8 and 0.08, respectively. The population size was set at 200 and 500 offsprings. The evolutionary process was kept running until no improvements were made in the objective function for 10 consecutive generation cycles (i.e. 500!10 offsprings) or the objective function reached its known target value, whichever comes first."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 13,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "3.3.2.",
               "text": "Memetic algorithms",
               "type": "introduction"
          },
          "paragraphs": [
               "MAs are similar to GAs but apply local search on chromosomes and offsprings. The standard pair-wise interchange search does not suit the continuous functions F8 and F10, and the local-search procedure in Appendix C is used instead. For the discrete problem, on the other hand, the pair-wise interchange was used. The same values of C P Z0.8 and M P Z0.08 that were used for the GAs are applied to the MAs. After experimenting with various values, a population size of 100 chromosomes was used for the MAs.",
               "The results found from solving the three test problems using the five EAs, which represents a fairly wide class of problems, are summarized in , and (the Y axis of is a log scale to show long computer run times). It is noted that the processing time for solving the EF10 function was similar to that of the F8 function and follows the same trend as shown in .",
               "Twenty trial runs were performed for each problem. The performance of the different algorithms was compared using three criteria: (1) the percentage of success, as represented by the number of trials required for the objective function to reach its known target value; (2) the average value of the solution obtained in all trials; (3) the processing time to reach the optimum target value. The processing time, and not the number of generation cycles, was used to measure the speed of each EA, because the number of generations in each evolutionary cycle is different from one algorithm to another. In all experiments, the solution stopped when one of two following criteria was satisfied: (1) the F8 and EF10 objective functions reached a target value of 0.05 or less (i.e. to within an acceptable tolerance of the known optimum value of zero), or 110 days for the TCT problem; or (2) the objective function value did not improve in ten consecutive generations. To experiment with different problem sizes, the F8 test function in Eq. (10) was solved using 10, 20, 50, and 100 variables, while the EF10 test function in Eq. (13) was solved using 10, 20, and 50 variables (it becomes too complex for larger numbers of variables). Surprisingly, the GA performed more poorly than all the other four algorithms. In fact, it was found to perform more poorly than even that reported in Whitley et al. and Raphael and Smith when using the CHC and Genitor GAs, while it performed better than the ESGAT GA version. A commercial GA package, Evolver , was used to verify the results. Evolver is an add-in program to Microsoft Excel, where the objective function, variables (adjustable cells), and the constraints are readily specified by highlighting the corresponding spreadsheet cells. Evolver performed almost the same way as the VB code with slight improvement. The results of using Evolver are reported in . The difference in GA results than those reported in Refs. may in part be because the GA utilized in this paper uses real rather than binary coding.",
               "As shown in for the F8 function, the GA was able to reach the target for 50% of the trials with 10 variables, and the number of successes decreased as the number of variables increased. Despite its inability to reach the optimum value of zero with the larger number of 100 variables, the GA was able to achieve a solution close to the optimum (0.432 for the F8 function with 100 variables). Also, it is noticed from that as the number of variables increased, the processing time to reach the target also increased (from 5 min:12 s with 10 variables to 40 min:27 s with 50 variables). As shown in for the EF10 test function, the GA was only able to achieve 20% success using 10 variables, and that the solution quality decreased as the number of variables increased (e.g. the objective functionZ5.951 using 50 variables). Using the GA to solve the TCT problem, the minimum solution obtained was 113 days with a minimum total cost of $162,270 and the success rate for reaching the optimum solution was zero, as shown in .",
               "Upon applying the MA, the results improved significantly compared to those obtained using the GA, in terms of both the success rate ) and the processing time . Solving the F8 function using 100 variables, for example, the success rate was 100% with a processing time of 7 min:08 s. Even for the trials with less success rate, as shown in , the solutions were very close to the optimum. That is to say, the local search of the MA improved upon the performance of the GA. When applying the MA to the TCT problem, it was able to reach the optimum project duration of 110 days and a total cost of $161,270, with a 20% success rate and an average cost that improved upon that of the GA . It is to be noted that the local-search module presented in Appendix C was applied for the F8 and EF8 functions, while the pair-wise interchange local-search module was applied to the TCT problem. The PSO algorithm outperformed the GA and the MA in solving the EF10 function in terms of the success rate , the processing time , while it was less successful than the MA in solving the F8 function. Also, the PSO algorithm outperformed all other algorithms when used to solve the TCT problem, with a success rate of 60% and average total cost of $161,940, as shown in .",
               "The ACO algorithm was applied only to the TCT discrete optimization problem. While it was able to achieve the same success rate as the GA (20%), the average total cost of the 20 runs was greater than that of all other algorithms ). This is due to the scattered nature of the obtained results (minimum duration of 110 days, and maximum duration of 139 days) caused by premature convergence that happened in some runs. To avoid premature convergence, the pair-wise interchange local-search module was applied and the results obtained were greatly improved with a success rate of 100%, but the average processing time increased from 10 to 48 s.",
               "When solving the F8 and EF10 test functions using the SFL algorithm, it was found that the success rate was better than the GA and similar to that for PSO. However, it performed less well when used to solve the EF10 function. As shown in , the SFL processing times were the least among all algorithms. Interestingly, it is noticed from that as the number of variables increased for the F8 function, the success rates for SFL, MA and PSO all increased. This is because the F8 function becomes smoother as its dimensions increase . As opposed to this trend, the success rate decreased for the GA as the number of variables increased. The same trend for the GA was also reported in Refs. when used to solve the F8 function. Also, using the SFL algorithm to solve the TCT problem, the minimum duration obtained was 112 days with minimum total cost of $162,020 . While the success rate for the SFL was zero, its performance was better than the GA.",
               "It is interesting to observe that the behavior of each optimization algorithm in all test problems (continuous and discrete) was consistent. In particular, the PSO algorithm generally outperformed all other algorithms in solving all the test problems in terms of solution quality (except for the F8 function with 10 and 50 variables). Accordingly, it can be concluded that the PSO is a promising optimization tool, in part due to the effect of the inertia weight factor u. In fact, to take advantage of the fast speed of the SFL algorithm, the authors suggest using a weight factor in Eq. (3) for SFL that is similar to that used for PSO (some preliminary experiments conducted by the authors in this regard have shown good results)."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 14,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "n": "4.",
               "text": "Conclusions",
               "type": "conclusion"
          },
          "paragraphs": [
               "In this paper, five evolutionary-based search methods were presented. These include: GA, MA, PSO, ACO, and SFL. A brief description of each method is presented along with a pseudocode to facilitate their implementation. Visual Basic programs were written to implement each algorithm. Two benchmark continuous optimization test problems were solved using all but the ACO algorithm, and the comparative results were presented. Also presented were the comparative results found when a discrete optimization test problem was solved using all five algorithms. The PSO method was generally found to perform better than other algorithms in terms of success rate and solution quality, while being second best in terms of processing time."
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 15,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "text": "Appendix A. Pseudocode for a GA procedure",
               "type": "conclusion"
          },
          "paragraphs": [
               "Begin;",
               "Generate random population of P solutions (chromosomes); For each individual i2P: calculate fitness (i); For iZ1 to number of generations; Randomly select an operation (crossover or mutation); If crossover; Select two parents at random i a and i b ; Generate on offspring i c Zcrossover (i a and i b ); Else If mutation;",
               "Select one chromosome i at random; Generate an offspring i c Zmutate (i); End if; Calculate the fitness of the offspring i c ; If i c is better than the worst chromosome then replace the worst chromosome by i c ; Next i; Check if terminationZtrue; End;",
               "Appendix B. Pseudocode for a MA procedure Begin;",
               "Generate random population of P solutions (chromosomes); For each individual i2P: calculate fitness (i); For each individual i2P: do local-search (i);",
               "For iZ1 to number of generations; Randomly select an operation (crossover or mutation); If crossover; Select two parents at random i a and i b ; Generate on offspring i c Zcrossover (i a and i b ); i c Zlocal-search (i c ); Else If mutation;",
               "Select one chromosome i at random; Generate an offspring i c Zmutate (i); i c Zlocal-search (i c ); End if; Calculate the fitness of the offspring; If i c is better than the worst chromosome then replace the worst chromosome by i c ; Next i; Check if terminationZtrue; End;",
               "End;",
               "Appendix E. Pseudocode for an ACO procedure Begin;",
               "Initialize the pheromone trails and parameters; Generate population of m solutions (ants); For each individual ant k2m: calculate fitness (k); For each ant determine its best position; Determine the best global ant; Update the pheromone trail; Check if terminationZtrue; End;",
               "Appendix F. Pseudocode for a SFL procedure Appendix C. Pseudocode for the memetic local search"
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 16,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "text": "Begin;",
               "type": "conclusion"
          },
          "paragraphs": [
               "Select an incremental value dZa*Rand( ), where a is a constant that suits the variable values; For a given chromosome i2P: calculate fitness (i); For jZ1 to number of variables in chromosome i; Value (j)Zvalue (j)Cd; If chromosome fitness not improved then value (j)Zvalue (j)Kd; If chromosome fitness not improved then retain the original value (j); Next j; End;",
               "Appendix D. Pseudocode for a PSO procedure"
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 17,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     },
     {
          "head": {
               "text": "Begin;",
               "type": "conclusion"
          },
          "paragraphs": [
               "Generate random population of P solutions (frogs); For each individual i2P: calculate fitness (i); Sort the population P in descending order of their fitness; Divide P into m memeplexes; For each memeplex; Determine the best and worst frogs; Improve the worst frog position using Eqs. (4) or (5); Repeat for a specific number of iterations; End; Combine the evolved memeplexes; Sort the population P in descending order of their fitness; Check if terminationZtrue; End;",
               "Begin;",
               "Generate random population of N solutions (particles); For each individual i2N: calculate fitness (i); Initialize the value of the weight factor, u; For each particle; Set pBest as the best position of particle i; If fitness (i) is better than pBest; pBest(i)Zfitness (i); End; Set gBest as the best fitness of all particles; For each particle;",
               "Calculate particle velocity according to Eq. (3); Update particle position according to Eq. (4); End; Update the value of the weight factor, u; Check if terminationZtrue;"
          ],
          "paper_id": "21bfd0c0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 18,
          "fromPaper": "Comparison among five evolutionary-based optimization algorithms"
     }
]