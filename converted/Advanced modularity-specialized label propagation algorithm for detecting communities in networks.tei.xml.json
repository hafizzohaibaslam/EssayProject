[
     {
          "head": {
               "n": "0",
               "text": "abstract",
               "type": "abstract"
          },
          "paragraphs": [
               "A modularity-specialized label propagation algorithm (LPAm) for detecting network communities was recently proposed. This promising algorithm offers some desirable qualities. However, LPAm favors community divisions where all communities are similar in total degree and thus it is prone to get stuck in poor local maxima in the modularity space. To escape local maxima , we employ a multistep greedy agglomerative algorithm (MSG) that can merge multiple pairs of communities at a time. Combining LPAm and MSG, we propose an advanced modularity-specialized label propagation algorithm (LPAm+). Experiments show that LPAm+ successfully detects communities with higher modularity values than ever reported in two commonly used real-world networks. Moreover, LPAm+ offers a fair compromise between accuracy and speed."
          ],
          "paper_id": "21491a20-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 0,
          "fromPaper": "Advanced modularity-specialized label propagation algorithm for detecting communities in networks"
     },
     {
          "head": {
               "n": "1.",
               "text": "Introduction",
               "type": "introduction"
          },
          "paragraphs": [
               "Detecting communities in networks has attracted a great deal of interest recently. Informally, a community is a densely connected subnetwork that is only sparsely linked to the remaining network. It is said that constructing algorithms for detecting communities is of great importance as it provides insight into the structures of real-world systems .",
               "Modularity is a scalar value that measures the quality of a particular division of a network into communities. Among various kinds of methods for detecting network communities, one that is widely used is modularity optimization . The modularity optimization method detects communities by searching over possible divisions of a network for one that have particularly high modularity. Since finding the \"best\" community division with the highest modularity value is proven to be NP-hard , exhaustive search over all possible divisions is in general intractable. Therefore, all of the modularity optimization algorithms are based on approximate optimization.",
               "Recently Raghavan, Albert et al. propose a label propagation algorithm (LPA) for detecting network communities. This innovative and promising algorithm uses only the network structure as a guide, and can detect communities at very high speed. Barber and Clark extend LPA by relating it to modularity, and introduce a modularity-specialized LPA (LPAm) . However, it is found that LPAm is prone to get stuck in poor local maxima in the modularity space . To detect communities with high modularity values, we improve LPAm by driving it out of local maxima and devise a new algorithm called LPAm+ in this paper. Experiments show that LPAm+ successfully detects communities with the highest modularity values in several commonly used real-world networks.",
               "The structure of the paper is as follows: in the next section, the definition of modularity is reviewed. In section 3, we give a survey of LPA and LPAm. Our algorithm is proposed in section 4. Experiments are shown in section 5, followed by a conclusion and discussion in the last section."
          ],
          "paper_id": "21491a20-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 1,
          "fromPaper": "Advanced modularity-specialized label propagation algorithm for detecting communities in networks"
     },
     {
          "head": {
               "n": "2.",
               "text": "Modularity",
               "type": "introduction"
          },
          "paragraphs": [
               "To evaluate the goodness of a particular division of a network into communities, Newman introduces a measure called modularity . Consider a (undirected and unweighted) network with n nodes and m edges represented by an adjacency matrix A, whose element Auv is equal to 1 if there is an edge between nodes u and v, and 0 otherwise. The degree of a node u is denoted by ku. Suppose a particular division of the network into Nc communities, such that each node u is assigned to a community lu. Modularity essentially measures the actual fraction of intra-community edges minus its expected value in a null model, where the community division is the same but connections are made randomly between nodes. Formally, modularity is defined as:",
               "where P uv = k u k v /2m is probability in the null model that an edge exists between nodes u and v, and(i, j) is the Kronecker's delta. Further, a modularity matrix B is defined with elements B uv = A uv ? P uv . Hence, modularity is expressed as:",
               "u,v=1",
               "We can also reformulate modularity as the addition of contributions over all communities:",
               "where I t is the number of intra-community edges that have both ends in community t, D t the sum over all degrees of nodes in community t."
          ],
          "paper_id": "21491a20-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 2,
          "fromPaper": "Advanced modularity-specialized label propagation algorithm for detecting communities in networks"
     },
     {
          "head": {
               "n": "3.",
               "text": "LPA",
               "type": "introduction"
          },
          "paragraphs": [
               "In this section, we give a survey of LPA and LPAm, which are the bases of the following discussion."
          ],
          "paper_id": "21491a20-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 3,
          "fromPaper": "Advanced modularity-specialized label propagation algorithm for detecting communities in networks"
     },
     {
          "head": {
               "n": "3.1.",
               "text": "LPA",
               "type": "introduction"
          },
          "paragraphs": [
               "The idea of LPA is simple : initially each node in the network is assigned with a unique label, indicating the community it belongs to. At every label propagation step, each node sequentially updates its label to a new one which is the most frequent label among its neighbors. Formally, the label updating rule for node x is: indicates new label for node x. If more than one label are the most frequent ones, the new label is chosen randomly from them. The label propagation step is performed iteratively until each node has a label that is (one of) the most frequent label(s) of its neighbors. Finally communities are identified as groups of nodes bearing the same labels.",
               "The most striking feature of LPA is its less expensive computation than what is possible so far (near linear time complexity) . The weakness is that LPA is not stable: the algorithm is sensitive to the order in which node labels are updated in each step. Thus the solutions (and their corresponding modularity values) can be quite different in different runs . Sometimes LPA may even end up with a trivial solution-all nodes are identified in the same community ."
          ],
          "paper_id": "21491a20-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 4,
          "fromPaper": "Advanced modularity-specialized label propagation algorithm for detecting communities in networks"
     },
     {
          "head": {
               "n": "3.2.",
               "text": "LPAm",
               "type": "introduction"
          },
          "paragraphs": [
               "Barber and Clark extend LPA by modifying the label updating rule so that modularity can be maximized, and propose a new algorithm called LPAm . We can rewrite (2) by separating elements regarding the label of node x from others, yielding:",
               "When updating the label for x, by selecting a new label that maximizes the second term on the right hand side of (5), we actually maximize Q. Hence, to consider updating the label for node x, the updating rule of LPAm is:",
               "Implementing LPAm would bring about a monotone increase in modularity, hindering the trivial solution being formed. Besides, LPAm preserves the merit of high speed of LPA. But LPAm is prone to get stuck in poor local maxima in modularity space, with a similar total degree of nodes in different communities . Moreover, LPAm still suffers from the weakness of instability."
          ],
          "paper_id": "21491a20-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 5,
          "fromPaper": "Advanced modularity-specialized label propagation algorithm for detecting communities in networks"
     },
     {
          "head": {
               "n": "4.",
               "text": "LPAm+",
               "type": "introduction"
          },
          "paragraphs": [
               "In this section, we first give an example in which LPAm gets stuck in a local maximum, then we introduce how to escape the local maximum and propose our improved algorithm LPAm+. Take the toy network shown in (a) as an example. This network is intuitively divided into two communities (painted in yellow and green colors respectively), with its modularity equal to 0.413. Feeding LPAm with this network, we obtain a division into four communities ( ) and its modularity is 0.399. Evidently this division corresponds to a local maximum in the modularity space. Under the label updating rule (6), LPAm favors community divisions where all communities are similar in total degree, which immediately leads to the separation of communities {0-3}, {4,5} and {6-9}.",
               "To escape the local maximum, we have to get rid of the current constraint. Note that (6) is a modularity maximization rule based on local structure of the network. Viewing broadly, we can adopt the greedy rule for merging communities that maximizes modularity: when LPAm gets stuck in a local maximum (no modularity gain can be achieved from further label propagation), we calculate the modularity changes for merging pairs of communities, and merge those pairs that improve modularity most. In real operation, we employ the technique used in the multistep greedy agglomerative algorithm (MSG) that promotes simultaneously merging of multiple pairs of communities at a time, under the following criteria: suppose t 1 and t 2 is a pair of communities to be merged; neither t 1 nor t 2 is present in another pair inducing a higher modularity changes (see Appendix for additional details).",
               "After merging communities, we escape the local maximum. Then we should carry out another round of LPAm. This is analogous to climbing onto another local maximum. However, it is not guaranteed that the new local maximum we arrived at is good enough (although it is better than the previous local maximum). Hence we should repeat the above process (escaping the local maximum and climbing onto another local maximum) for many times, until no improvement of modularity can be reached. "
          ],
          "paper_id": "21491a20-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 6,
          "fromPaper": "Advanced modularity-specialized label propagation algorithm for detecting communities in networks"
     },
     {
          "head": {
               "n": "5.",
               "text": "Experiments",
               "type": "experiment"
          },
          "paragraphs": [
               "We test LPAm+ in several real-world networks that are commonly used by other researchers for evaluating modularity optimization algorithms. These networks include: the karate club network (Karate Club) , the dolphin association network (Dolphins) , the network of co-purchased political books (Political Books) , the network of games between college football teams (College Football) , the network of collaborations between jazz musicians (Jazz) , the network of metabolic reactions in Caenorhabdities elegans (C. elegans) , the network of email contacts at a university (E-mail) , the Pretty Good Privacy web of trust social network (PGP) , and the network of co-authorships for e-print papers posted to the condensed matter archive (Condmat2003) . As most of the researchers did, we uniformly treat all networks as undirected and unweighted, and exclude all self-loop edges. lists the numbers of nodes and edges after preprocessing the data. We apply LPAm and LPAm+ one hundred times to each of the networks. shows the maximal modularity, the average modularity, the standard deviation of modularity, and the average execution time collected from samples. We can see that both the maximal modularity and the average modularity obtained by LPAm+ are markedly higher than those by LPAm, consistently in all of the networks. This implies the success of our trick for escaping the local maxima. For the index of the standard deviation of modularity, we can find that LPAm+ value is significantly smaller than that of LPAm. As a matter of fact, normally the difference of modularity values between solutions of LPAm+ in different runs is within 1%. Even in extreme cases, the difference between the worst and the best modularity values is no more than 5%. Therefore, LPAm+ is much more stable than LPAm. portrays the running time of LPA and LPAm+ in networks of different sizes. In the following, we give a time complexity analysis for LPAm+. On the one hand, one step of label propagation in LPAm costs O(m) time , so the time complexity of LPAm is O(rm), where r is the number of label propagation steps required to reach a local maximum in modularity space. On the other hand, one round of merging pairs of communities that corresponds to the for-loop in Algorithm 1 requires a time of O(mlogn) . Let h denote the number of needed iterations for the while-loop in Algorithm 1. The overall time of LPAm+ can be written as O(rm)+h(O(mlogn)+O(rm)). An exact estimation of h is not possible, as it depends on the quality of the intermediate solution obtained by LPAm. Suppose d is defined as the depth of the dendrogram describing the community structure. The number of merging rounds for a single MSG algorithm (the step width is set to be +) would be d. The number of merging rounds in our algorithm, namely h, seems a little obscure, since LPAm is performed after each merging rounds. However, note that only two cases can happen during the label propagation process in LPAm: some communities disappear and the remaining communities exchange parts of their nodes with each other.",
               "1 Hence we can safely arrive at: h?d. In , we list the true values of h when LPAm+ is applied to the various networks mentioned above.",
               "As for r, it is still not very well understood. In , the authors suggests that the number of label propagation steps required for LPA algorithm to converge is independent to the number of nodes, and after 5 steps 95% of the nodes can get their \"right\" labels. We show the actual values of r obtained from running LPAm+ in real-world networks in . It seems that r is bounded by a small constant. Therefore, r=o(logn).",
               "Taken all together, in a hierarchical network where d?logn, LPAm+ requires an overall time of O(mlog 2 n). This scaling is the same as MSG and the classical greedy agglomerative algorithm .",
               "To compare the performance of LPAm+ with other algorithms, in we include the (maximal) modularity values obtained by LPAm+ and by many previously published methods in these networks. These methods are, in order, the hybrid algorithm of MSG algorithm in combination with node moving refinement algorithm proposed by Schuetz and Caflisch (MSG-VM) , the hybrid algorithm of single-step greedy agglomerative algorithm by significance in combination with multilevel node moving refinement algorithm advanced by Noack and Rotta (SS-ML) , the greedy agglomerative algorithm put forward by Clauset, Newman and Moore (Greedy) , the math-1 In theory, there are three cases during the label propagation process in LPAm: 1) existent communities disappear (this situation happens when all nodes of a community select the labels of other communities as their new labels); 2) communities exchange part of their nodes with each other (this situation happens when a part of nodes of one community select the labels of other communities as their new labels); 3) new communities appear (this situation happens when some nodes select unused labels as their new labels). But case 3) never happens in practice. . The average number of label propagation steps required for the embedded LPAm to converge, denoted by r, and the number of iterations for the while-loop, denoted by h, when LPAm+ is applied to real-world networks. Values are averaged over one hundred runs in each of the networks. The uncertainty of the final digit, calculated as the standard error of the mean, is shown parenthetically. ematical programming approach proposed by Agarwal and Kempe (VP/LP) , the extremal optimization algorithm introduced by Duch and Arenas (EO) , the simulated annealing implementation proposed by Guimerand Amaral (SA) , and the spectral optimization method suggested by Newman (SO) .",
               "To make it clearer, in , we summarize the best solutions obtained by LPAm+ and the ones with the highest modularity values ever reported in these networks. It is found that, for eight of the nine networks considered here (Karate Club, Dolphins, Political Books, College Football, Jazz, C. elegans, E-mail and PGP), LPAm+ finds the highest modularity values. Especially, for two networks (C. elegans and E-mail), LPAm+ finds modularity values higher than previously published. Only in the Condmat2003 network, LPAm+ is outperformed by SS-ML algorithm. It is interesting to note that SS-ML, which employs the single-step greedy agglomerative algorithm followed by the multilevel node moving refinement algorithm 2 , achieves much higher modularity value than other algorithms in this network. In , the devisers of SS-ML argue that MSG algorithm is generally less effective than the single-step greedy agglomerative algorithm. Perhaps the reason that LPAm+ does not work well in the Condmat2003 network is that its component MSG, with a too aggressive strategy, diverts the algorithm to a suboptimal portion of the solution space. It is also worthwhile to note that that the VP/LP and SA algorithms can as well find the highest modularity values in some of the networks. But they are computationally much expensive and do not scale to larger networks like PGP and Condmat2003. Therefore, though not as fast as LPAm which is noted for its speed, LPAm+ offers a fair compromise between accuracy and speed."
          ],
          "paper_id": "21491a20-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 7,
          "fromPaper": "Advanced modularity-specialized label propagation algorithm for detecting communities in networks"
     },
     {
          "head": {
               "n": "6.",
               "text": "Conclusion and discussion",
               "type": "conclusion"
          },
          "paragraphs": [
               "In this paper, we introduce a new community detection algorithm LPAm+ based on the previously proposed algorithm LPAm. The main idea is that we try to drive LPAm out of local maxima and hereby employ MSG to merge pairs of communities which are similar in total degree. Experiments show that LPAm+ improves LPAm in terms of modularity of the detected communities, with extra computational time. Besides, LPAm+ is more stable than LPAm. Compared with other algorithms, LPAm+ distinguishes itself by its accuracy (measured by modularity) while preserving relatively high speed. The fact that LPAm+ detects the highest modularity values in almost all of the test networks is impressive.",
               "It should be noted that the speed of LPAm+ can still be substantially improved. First, when updating the label for a node in LPAm, candidates of the new label can be safely confined to the labels of the neighbors of that node and an unused label (further, we find through experiments that unused label is never selected as a new label). In light of this, we can only update the labels of nodes whose neighbors had a label change. This means only a few labels need to be updated after most of the other labels are fixed. Hence the speed of LPAm can be dramatically increased. Second, it is possible to introduce a threshold and then stop LPAm as soon as the modularity gain from the latest label propagation step does not exceed this threshold. Although these two heuristics have little influence on the final modularity value, the computational time can be reduced to a great extent (the time complexity of the algorithm remains the same, since the order of the number of iterations for the while-loop is unchanged). For example, if we apply these two heuristics (the threshold is set to be 0.00001) in the Condmat2003 network, the running time is considerably reduced from 461.599s to 96.1s, with modularity dropped by only 0.013 (based on an average value). It is also interesting to note that MSG is not the only means to drive LPAm out of local maxima. After this work is done, we are informed that Blondel et al. use a reduction method (communities are reduced into nodes) to escape the local maxima involved in another algorithm different from LPAm, and propose a two-phase community detection algorithm . It seems that such reduction method can also be used to drive LPAm out of local maxima.",
               "Another important issue is that the solutions of LPAm+ in different runs, though give similar high modularity values, are not distinct in their compositions. This phenomenon is more obvious in large-scale networks. A very recent paper discusses the origin of this problem. How to make the algorithm more deterministic is left for our future work.",
               "Overall, the presented LPAm+ algorithm is a suitable choice for analyzing community structures in networks.",
               "or 'g', the value of n u=1 A u4(l u , l) that is the first term of (A.3) would all amount to 1. Yet the value of the second term of (A.3) k 4 d l /2m would be smaller for the choice of l as 'e' than as 'a' or 'g'. According to the updating rule (A.3), node 4 would keep its label unchanged and still select 'e' as the new label. Similar case is applied to node 5: it would also stick to label 'e' when updated. Consequently, under the current updating rule, neither node 4 nor 5 is willing to give in first. Suppose we disregard the current updating rule, and change the label of node 4 from 'e' to 'a' forcedly. Though this will bring about a temporary decrease in modularity, it is reasonable to expect a greater reward from the subsequent label updation for node 5 and other nodes. Conceptually, we call nodes like 4 and 5 that block the system from further progressing as stubborn nodes. It is these stubborn nodes that results in LPAm getting stuck in local maxima.",
               "To escape the local maxima, we should attempt to let one or more of the stubborn nodes make a compromise to break down the blocked situation. Suppose i 1 , . . . , i k is a set of stubborn nodes labeled l (i 1 ,...,i k ) . Our trick is to keep i 1 , . . . , i k holding the same label and update it (let i 1 , . . . , i k make a compromise at the same time). Treating the labels of i 1 , . . . , i k separately and rewriting (2), we have: ..,i k ) , the change of label for this set of stubborn nodes from l (i 1 ,...,i k ) to l new (i 1 ,...,i k ) is in effect equivalent to merging the community pairs labeled l (i 1 ,...,i k ) and l new (i 1 ,...,i k ) . In real operation, instead of identifying the stubborn nodes and then updating their label according to , we directly"
          ],
          "paper_id": "21491a20-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 8,
          "fromPaper": "Advanced modularity-specialized label propagation algorithm for detecting communities in networks"
     }
]