[
     {
          "head": {
               "n": "0",
               "text": "abstract",
               "type": "abstract"
          },
          "paragraphs": [
               "Agent-Oriented Software Engineering (AOSE) is an emerging software engineering paradigm that advocates the application of best practices in the development of Multi-Agent Systems (MAS) through the use of agents and organizations of agents. This paper outlines the MADE system, which provides an interactive platform for people who are not well-versed in AOSE to contribute to the rapid prototyping of MASs with ease."
          ],
          "paper_id": "2359aaa0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 0,
          "fromPaper": "Multi-Agent System Development MADE Easy"
     },
     {
          "head": {
               "text": "Introduction",
               "type": "introduction"
          },
          "paragraphs": [
               "Agent Oriented Software Engineering (AOSE) is a software engineering paradigm that advocates the application of best practices in the development of Multi-Agent Systems (MAS) through the use of agents and organizations of agents. Over the years, intelligent agents have evolved from software which responds to stimuli (i.e., reactivity) to programs which take initiative (i.e., autonomy) to fulfill their goals (i.e., proactiveness) and interact with each other (i.e., social ability) .",
               "Currently, agent development tools are mostly based on sophisticated agent modelling methodologies such as the Belief-Desire-Intention (BDI) model ). Thus, agent developers often require specialized knowledge or training. However, as agents often need to be incorporated into real-world applications, the ability to infuse knowledge from domain experts is key to their success (e.g., in ), knowledge from security personnel is needed). How to enable domain experts who may not be familiar with AOSE to easily contribute to agent development is a significant research challenge.",
               "To address this problem, we propose the Multi-Agent Development Environment (MADE) . It is based on Goal Net which is a goal-oriented agent mental state modelling methodology ). Users can graphically design and manipulate the mental model of an agent using the Goal Net Designer (GND) integrated development environment (IDE) under MADE to observe the effects of their design decisions in real-time. The agent designs are captured by the Goal Net model. Agent developers only need to provide program codes governing specific functions the agent should perform when transiting from one goal to the next goal. In this way, MADE reduces the need for users to code agent internals and opens up new possibilities for people with limited AOSE knowledge to develop MASs."
          ],
          "paper_id": "2359aaa0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 1,
          "fromPaper": "Multi-Agent System Development MADE Easy"
     },
     {
          "head": {
               "text": "The Goal Net Methodology",
               "type": "introduction"
          },
          "paragraphs": [
               "Goal Net can be used to support the entire AOSE lifecycle. Its main design artifacts are simplified into three categories based on human intuitions to facilitate easy understanding by non-technical people. They are goals (a.k.a. states), transitions and arcs (as shown in . A goal (i.e., circles and round rectangles in ) denotes the immediate milestone an agent needs to achieve during its reasoning process. Goals can be iteratively decomposed into subgoal-nets. A transition defines a set of actions that enables an agent to transit from one goal to another. Depending on the types of transitions, they are represented as rectangles, hexagons, or inverted trapezoids ). An arc is a design artifact that indicates the direction of logic flow in an agent's mental state. Readers who are interested in more details regarding the semantics of Goal Net can refer to ). Based on the Goal Net methodology, an IDE called the Goal Net Designer has been developed to enable people with limited knowledge in AOSE to design agents easily ). The process of designing an agent using GND begins with a user determining the goals an agent needs to achieve from the beginning to the end of a cycle of operation. This step t parses the Goal Net data with input from the target application to decide the next goal to pursue and invokes the tasks defined in the transition towards the next goal. The Agent Runtime Manager supports the agent runtime environment, and facilitating the communication between agents and the target applications. Examples of Goal Net agents developed using MADE can be found in ( ). In summary, MADE enables agent developers to design agents graphically and develop the required tasks in the transitions via traditional software engineering. can be easily performed by placing the goals on the IDE interface and labeling them with proper names. Secondly, variables in each goal can be specified using the IDE to link them with variables in a target system in which the agent will operate. The desirable values for the variables which cause a goal to be regarded as achieved are also required when the user specifies these variables."
          ],
          "paper_id": "2359aaa0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 2,
          "fromPaper": "Multi-Agent System Development MADE Easy"
     },
     {
          "head": {
               "text": "Designing an Agent",
               "type": "introduction"
          },
          "paragraphs": [
               "Thirdly, the user needs to place transitions between pairs of goals so that the agent knows what tasks need to be carried out in order to transit from one goal to another. Within each transition, the user can specify a list of tasks to be executed in the given sequence. Each task can be implemented as a web service or a function in a dynamic linked library (DLL) so that it can be executed by the agent at runtime.",
               "Lastly, the user connects the goals and transitions of the goal net together using arcs. GND supports both sequential arcs and concurrent arcs ). In this way, complex flows of logic represented by a combination of execution sequences can be specified for an agent.",
               "At any stage during the design process, the user can click on the model checking button on the GND IDE to check the correctness of the design. The model checking function automatically checks the design for compliance with the Goal Net semantics, identifies potential deadlocks/livelocks in the logic, and generates a report for the user."
          ],
          "paper_id": "2359aaa0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 3,
          "fromPaper": "Multi-Agent System Development MADE Easy"
     },
     {
          "head": {
               "text": "Deploying an Agent",
               "type": "introduction"
          },
          "paragraphs": [
               "As shown in , a user interacts directly with GND. Once an agent is designed, the Goal Net structure data and the related meta-data are saved into a database on the Cloud. To deploy an agent, the Agent Creator creates an agent based on selected the Goal Net data. The Interpreter of the agen-"
          ],
          "paper_id": "2359aaa0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 4,
          "fromPaper": "Multi-Agent System Development MADE Easy"
     }
]