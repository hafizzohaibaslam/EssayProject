[
     {
          "head": {
               "n": "2.",
               "text": "RELATED WORK",
               "type": "relatedwork"
          },
          "paragraphs": [
               "The aforementioned approaches attack the efficiency issue by either improving GA algorithm or using new heuristics. However none of them takes into consideration the community property of social networks.",
               "We also note that Scripps et al. present a metric to estimate the number of communities to which a node is attached and define community-based roles for a node (e.g. a node that links to many nodes from different communities takes a so-called ambassador role). They also briefly discuss the application of communitybased roles, i.e. selecting nodes with an ambassador role to maximize the number of communities influenced by the selected nodes. The application problem is different from the influence maximization problem addressed in this paper and our algorithm is completely different from the approach .",
               "Our work is also related to community detection. There are a host of algorithms for community detection. However, it remains to be a challenging problem for a large social network. Some approaches assume that the number or size of the partitions into which the network is to be split is known in advance. They usually optimize a quality measure of network clustering, such as popular modularity measure , and need to solve an NP-complete problem. Some popular heuristic algorithms include min-max cut method , normalized cut , SCAN and Spectral Clustering . In a Mobile Social Network, the number of communities and the size of communities are unknown. Also, these methods are quite expensive when applied to a large network. A hierarchical clustering method is proposed with complexity O(Eh log N ), where E is the number of edges, N the number of nodes and h the depth of hierarchical clusters. Raghavan et al. propose a near linear algorithm running in O(E) time, E the number of edges, which is less expensive than earlier algorithms. In , it uses a simple label propagation algorithm that uses the network structure alone as its guide and requires neither optimizing an objective function nor prior information about the communities. However, none of existing approach takes into account information diffusion.",
               "Although we focus on mobile social network in this paper, mobile social network reflects the properties of other scale-free networks, such as paper citation graph, in which degrees follow the the power-law distribution , and so does link-based similarity , and thus the proposed techniques would be applicable to other scale-free networks."
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 0,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "n": "3.",
               "text": "PRELIMINARIES AND PROBLEM STATEMENT",
               "type": "relatedwork"
          },
          "paragraphs": [
               "The Independent Cascade model does not take edge weight into consideration. However, a mobile social network is a directed weighted graph, and the weight should play an important role in information diffusion. Intuitively, the more contacts between two nodes, the more likely the influence will happen. We extend the definition diffusion speed in the Independent Cascade model to accommodate the edge weight. The influence rate raises as the weight between nodes increases. We note that Weighted Independent Cascade model , a special case of Independent Cascade model, considers node weight but not edge weight, and thus is still not directly applicable to a MSN. We also note that Kempe et al. also considers Linear Threshold model. As proved in , Linear Threshold model and Independent Cascade model can be unified with proper parameter initialization. We can extend the linear threshold model as we do for Independent Cascade model to accommodate edge weight, and our proposed algorithm is equally applicable.",
               "We introduce the Independent Cascade information diffusion model, and then the problem statement. lists the notations to be used extensively in the rest of this paper. The average degree of the network K",
               "The number of influential nodes to be mined I",
               "The set of K influential nodes",
               "The ith community M",
               "The number of communities whereis the average diffusion speed of the whole network, wij is the weight of direct edge from v i to vj, wmin is the minimum weight of directed edge and w max the maximum weight in the network.",
               "Then the diffusion mechanism can be described as follows:",
               "1. The diffusion process begins with an initial set of active nodes A at step t=0.",
               "Influence degree in G of nodes in set A R m(A)",
               "Influence degree in community Cm of nodes in A 2. At each step t, an active node vi from last step St?1 will be given a single chance to influence each of its inactive neighbors v j , with success probabilityij. If vj is successfully influenced, it is activated and is added set S t.",
               "Mobile Social Networks. We extract a Mobile Social Network from the call log and model it as a directed weighted graph: a phone user corresponds to a node; a directed edge from node u to node v is established, if there exits communication from u to v, with the corresponding communication time as the weight of the edge. We denoted the graph as G = (V, E, W), where V, E, and W represent nodes, edges, and weights, respectively.",
               "3. The process terminates when St is empty. The set of nodes influenced by A is the union of all the S t generated at each step. We denote the number of nodes influenced by A as V A.",
               "DEFINITION 2. (Influence Degree) Let A be the initial set of active nodes. The influence degree of set A is computed as:",
               "where V A is the number of nodes influenced by A during information diffusion process.",
               "Independent Cascade Model. The model is originally proposed by Lopez-Pintado , and is the most common dynamic model in information diffusion. It is widely used in maximizing the number of individuals who are influenced by the merchandize information in direct marketing. It is used in previous work on influence maximization . In the model we assign two states to nodes: active and inactive. Active nodes are those that are influenced by other active nodes, and are able to influence their inactive neighbors; inactive nodes are those that are not influenced by their active neighbors. The state of a node can be switched from being inactive to being active, but not vice versa. The model has an important parameter called diffusion speed. When an active node v i contacts an inactive node v j , the inactive node becomes active at a probability (rate). In a viral marketing, diffusion speed models the tendency of individuals to accept a product. Thus the diffusion is affected by diffusion speed, node degree, and the number of initial active nodes.",
               "ProblemStatement: Given a mobile social network G = (V, E, W), we aim to mine a set of top-K influential nodes S on the network such that R(S) is maximized using the extended Independent Cascade information diffusion model. It has been proved that the optimization problem is NP-hard . A greedy algorithm can approximate the optimum to within a factor of (1 ? 1 e ). However, the greedy algorithm is expensive for solving the influence maximization problem on a large-scale network. So we propose a community based greedy algorithm which mine the influential nodes in each community rather than the whole network."
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 1,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "n": "4.",
               "text": "MINING TOP-K INFLUENTIAL NODES",
               "type": "relatedwork"
          },
          "paragraphs": [
               "We first present the proposed algorithm CGA for mining top-K influential nodes in communities, and then present the partitioning algorithm that takes into account the diffusion model. We also provide precision analysis of the proposed algorithm."
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 2,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "n": "4.1",
               "text": "CGA:Community-Based Greedy Algorithm",
               "type": "relatedwork"
          },
          "paragraphs": [
               "To find the k th Although a greedy algorithm gives a good approximation to the problem of finding top-K influential nodes, it is expensive for large networks.",
               "We first present an important concept to be used in the rest of subsection. We say that a node v influences node u if node v activates node u, i.e. u becomes active from inactive, for at least Q/2 times out of Q simulations of the diffusion process of Independent Cascade model. We also say that u is influenced by v. Recall that whether v can influence u depends on the influence speed and also the weight from v to u.",
               "The main idea of our method is to divide a network into communities, and then choose communities to find top-K influential nodes within communities. The community structure is a salient property of social network features: Individuals within a community have frequent contact and thus are more likely to influence each other; In contrast, individuals across communities have much less contact with each other and thus are less likely to influence each other. This property suggests that it might be a good approximation to choose influential nodes within communities instead of the whole network. Obviously it will be more efficient to choose influential nodes within communities.",
               "Suppose that we already divide a network into M communities (to be discussed in the next subsection). The remaining technical challenge is to choose which communities to find the top-K influential nodes. A straightforward solution is to mine top-K influential nodes in each community and then aggregate them to get the top-K nodes. This is not desirable as it wastes some computation.",
               "We propose a dynamic programming algorithm to choose which community to find the k , k, influential node, we choose the community s "
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 3,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "text": "(Note that these sign functions s[m, k], m < M, are used to compute s[M, k]).",
               "type": "relatedwork"
          },
          "paragraphs": [
               "In principle, we can use any existing algorithm to find the k th influential node in community s . In this paper, we adopt the MixedGreedy algorithm since it has the same approximation precision as previously proposed greedy algorithms and is shown to be more efficient."
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 4,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "text": "19: end for",
               "type": "relatedwork"
          },
          "paragraphs": [
               "The maximal increase is denoted asRm and we have:",
               "Note that in Equation 3 the influence degree Rm(.) is computed with regard to the community C m rather than the whole network.",
               "To mine the k th influential node, we need to choose the community that will yield the largest increase of influence degree among all the communities. Let R[m, k] (mand k) be the influence degree of mining the k ",
               "1. We mine top-2 nodes from a network. Assume that the network is partitioned into three communities C 1,C2, and C3, and based on Independent Cascade model we have: the maximal influence degree increment, denoted byR 1,R2 andR 3 for each community, is 0.2, 0.3, 0.1, respectively, for each community; and the second most maximal influence degree increment is 0.08, 0.06, 0.04, respectively, for each community. CGA works as follows:",
               "2. We proceed to find which community to mine top=1 node.",
               "Hence, we mine the top-1 node in community C2 because",
               "Note thatR2 in this step is 0.06, but not 0.3. We mine the second node in community",
               "a node v should belong to the community that contains the maximum number of its influenced neighbors. In algorithm , label propagation is performed among a node and its neighbors while we perform the propagation among a node and its neighbors that can be influenced by the node (based on Independent Cascade model).",
               "Note that this principle also renders our community detection problem different from that considered in previous proposals, e.g. . Steps 1 and 2 are straightforward and we proceed to explain the step 3, i.e. to perform the propagation of community label. This propagation is iterative in nature. At each iteration of the label propagation, we assign the community label for a node v based on the labels of its neighbors that are influenced by v. Specifically, for each node v we find out the label of the community that the majority of its influenced neighbors belong to, and the label will become the label of v. Formally, the label, denoted by v.C t , of a node v at iteration t is represented as follows:",
               "Complexity Analysis: We consider the complexity of lines 2-23 of Algorithm 1 (line 1 will be analyzed in next subsection). The algorithm needs O(K) time in lines 4-6, and O(M ) time in lines 7-9. Suppose the largest community after community detection is C p, thus lines 10-19 take O(MKTp) time, and lines 20-23 of mining nodes using MixedGreedy algorithm (that uses NewGreedy in the first round and uses CELF algorithm for the rest rounds) take O(K|C p|Tp) time, where Tp is the time to compute the influence degree of a node in community C p, and it takes O(QE p) time (where Q is the number of simulations for the Independent Cascade model, and E p is the number of edges in community C p). Hence the worst-case complexity of lines 2-23 of Algorithm 1 is",
               "where t denotes the tth iteration, sv denotes the number of neighbors that are influenced by v, u i (i) represents an influenced neighbor of node v, u i.C t?1 represents the community label of u i at iteration t-1, and maxCMT is to compute the majority label of u i.C t?1"
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 5,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "n": "4.2",
               "text": "Influential Model Based Community Detection Algorithm",
               "type": "modelling"
          },
          "paragraphs": [
               "Community structure is a basic property of a MSN and communities represent real circles of social groups in which members are more likely to influence each other . We will make use of the detected communities to approximate the influence of nodes in the whole network. Hence, we want to detect communities based on the influences between nodes, rather than only the connection between nodes, such that the influence degree of nodes within a community can be as close as that in the whole network. There exist a number of algorithms for community detection, and they partition graphs based on the node connections. However, none of them takes into account information diffusion between nodes.",
               "Our community detection algorithm consists of two steps, partition and combination. 1) Partition. we extend the algorithm with the information influence mechanism based on Independent Cascade model. The algorithm , a nearly linear algorithm for community detection, is designed for undirected and unweighted graph, and thus is not directly applicable to a MSN. 2) Combination. The generated communities in a MSN by the partition step are very small and dispersed; we develop a method to combine communities such that the difference between influence degree of a node in its community and its influence degree in the whole network is restricted. We proceed to present the two steps.",
               "(i). The partition step is detailed in lines 1-16 in Algorithm 2. The algorithm takes in three arguments, a network G, the number of iterationsand a thresholdto be used by the combination step. In the algorithm, a node v belongs to a community and its community label is denoted as v.C. Node v is also associated with a bit vector H v of length dv that is the degree of node v. Each neighbor uj of v corresponds to a bit Hv(j), j = 1, ..., dv, in Hv. If v influences its neighbor u j , the corresponding bit Hv(j) is set to 1 and otherwise 0. We can easily compute s v , the number of neighbors influenced by v, by counting the number of bit 1 in H v . The algorithm initializes the community label of each node v and finds the set of neighbors that are influenced by node v in lines 1-10. The function IsInfluence is implemented according to the definition of influence (Section 4.1). The algorithm then iteratively propagates community labels in lines 11-16: At each iteration t, we update the label of node v with the majority label of its neighbors that are influenced by v. It has been shown in that the propagation will become relatively stable in a few iterations."
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 6,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "n": "4.2.2",
               "text": "Community Combination",
               "type": "modelling"
          },
          "paragraphs": [
               "We expect that the difference between the node's influence degree in its community and its influence degree in the whole network is small. To achieve a good set of top-K influential nodes with a good influence degree in our algorithm, we define combination entropy to measure the connections of two communities and combine two communities if the combination entropy between them is larger than a threshold."
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 7,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "n": "4.2.1",
               "text": "Community Partition",
               "type": "modelling"
          },
          "paragraphs": [
               "We proceed to present an overview of our partitioning method. 1) Initially, each node is assigned a unique community label from 1 to N (the number of nodes); 2) for each node we compute the set of its influenced neighbors using Independent Cascade diffusion model; 3) we iteratively propagate the labels through the network in finite iterations. The main principle of the label propagation is that DEFINITION 3. (CombinationEntropy) If a node v influences (activates) its neighbor u, we label the edge e vu as live . If e vu is live and v belongs to community Cm, but u belongs to a different community C l , we say that u is a live node of Cm. Let L[C m] be the set of live nodes of Cm. The combination entropy of community C l to Cm is defined as:",
               "where Rm({u}) denotes the influence degree of node u outside the community C m, and Rm({v}) denotes the influence degree of node"
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 8,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "text": "Input: G = (V, E, W), threshold ��, number of iterations �� ;",
               "type": "modelling"
          },
          "paragraphs": [
               "Output: the set of communities C;",
               "1: for each vV do 2: v.C 0a distinct community label; 3: for each neighbor u j of v do 4:",
               "if IsInfluence(v, u j ) then"
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 9,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "text": "5:",
               "type": "modelling"
          },
          "paragraphs": [
               "Hv(j) = 1;",
               "6:",
               "Hv(j) = 0;",
               "8: time, whereis constant. Lines 17-24 needs O(E) time. Let Z and M denote the number of communities before and after combination, respectively. Let C p be the maximal community. Recall that computing the influence degree for one node in C p take Tp time. Lines 25-38 take O((Z ? M )NTp) time in the worst case: the number of iterations is Z-M in the worst case; each iteration takes O(NT p) time in the worst case, where we compute influence degree at N nodes at most. Note that in practice it will be much less expensive than the worst case complexity since it is very likely that we do not need to compute influence degree for all nodes, and the number of iterations is smaller than Z-M , and many communities are smaller than the maximal community C p. Hence the worst-case complexity of Algorithm2 is O(E+(Z?M )NT p). Taken together with the complexity of Algorithm1, the total worst-case complexity is",
               "{The following is the combination step}"
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 10,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "n": "4.3",
               "text": "Precision Analysis of CGA",
               "type": "modelling"
          },
          "paragraphs": [
               "{Z is the number of communities from Step 1} 18: for each vV do 19: for each neighbor u j , j, of v do 20:",
               "We proceed to derive the performance guarantee of the CGA by analyzing the approximation ratio of CGA.",
               "if ((v.C = u j .C) and (Hv(j) = 1)) then 21: approximate to the influence degree in the whole network G, whereis the threshold used in the combination step in Algorithm 2 andd is the maximal difference between the number of nodes affected by a node in network G and that in community C m. We have"
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 11,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "paragraphs": [
               ": uL uL v in its community Cm. As we detect the communities based on diffusion model, we have Rm({u})R l ({u}).",
               "For a node v in Cm, L includes its influenced neighbors such that they will make diffusion degree of v with regard to C m different from diffusion degree of v with regard to the whole network. Intuitively, combination entropy measures the difference of diffusion spread of a node v (v in C m) between in the community and in the whole network through a node in L[C m]. The difference reflects the precision loss due to diffusion within communities.",
               "We set a threshold. If the combination entropy CoEntropy (CE where d denotes the number of active neighbors of node v influenced by v in the whole network, dm denotes the number of active neighbors of node v influenced by v in the community C m andd ",
               "Thus, we have",
               "l m ) of community Cm to community C l is bigger than, then C m and C l will be combined.",
               "The combination step is outlined in lines 17-38 in Algorithm 2. In lines 17-24, we compute the set L[C m] for each community. The algorithm checks each node in L[C m] set and decides whether C l is combined into community Cm (lines 25-38). To make sure the combination entropy between any two communities is less than, we perform the combination iteratively. We use a variable isComb to record whether two communities are combined in each iteration; if no combination is done in an iteration (isComb =0), we terminate the while-loop.",
               "Complexity Analysis: It needs O(EQ) time in lines 1-10, where Q, the rounds of simulations, is constant. We get the proof.",
               "2 When the directed weighted mobile social network G = (V, E, W) and diffusion speedare given, the number of neighbors that a node can activate in network G or a community can be estimated. Thusd is a small number.is a constant. THEOREM 1. Let I * be the set of K nodes that maximize the influence degree, i.e. the optimal solution to our problem; let I be the set of K nodes discovered by our algorithm; let R(I * ) and R(I) be the influence degree of the two sets, respectively. The proposed CGA obtains a (1 ? e",
               "PROOF. Let Rm({vi}) be the influence degree of node vi in community C m and R({vi}) be the influence degree of node in the whole network. Let I(k) be the first k nodes in I. Let the k th node in I be v k .",
               "At least R(I * ) ? R(I(k ? 1)) individuals that are not covered by R(I(k ? 1)) are covered by the k subsets of R(I * ) . Hence, according to the pigeonhole principle, one of the k subsets in the optimal solution must cover at least",
               "k individuals . As we spread the diffusion in community C m, the in-",
               ". From the above analysis, we have R(I . Thus, we have the following deduction process:"
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "head": {
               "type": "modelling"
          },
          "paragraphNo": 12,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "n": "5.1.1",
               "text": "Data Sets",
               "type": "experiment"
          },
          "paragraphs": [
               "...",
               "We have a three-month CDR (call detailed record) data of a city from China Mobile, the largest mobile communication service provider in China. We extract a Mobile Social Network from the CDR data using the method presented in Section 3, and obtain a network with 723,201 nodes and an average degree of 13.4. shows the degree distribution of the mobile social network. We can see that it follows the power-law distribution, i.e. it is a scale-free network as many other social networks. is the lower bound of 1"
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 13,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "n": "5.2.1",
               "text": "Experiment on community detection",
               "type": "experiment"
          },
          "paragraphs": [
               "We evaluate the effectiveness and efficiency of the proposed CGA algorithm.",
               "The data sets we used and experimental setup beforehand are described at first, and then the results with different parameters are shown.",
               "All the experiments were conducted on a server with 2.0 GHz Intel Xeon 8 Core CPU and 8G memory running Debian/4.0 Operating system. This experiment is to evaluate the performance of the proposed community detection algorithm on a Mobile Social Network. In the Independent Cascade diffusion model, we use the diffusion speed 0.05, and set the number of simulations as 100; a neighbor of a node is influenced by the node if the neighbor is activated by the node for at least 50 times in 100 simulations. To choose a value for the parameter, the threshold for combination, we do experiment on a sub-graph with 1000 nodes (we randomly select a node from the whole MSN, and do a depth-first traversal starting from the se- lected node to get 1000 nodes). We do experiment with differentfrom 0.1 to 0.6 to combine the communities generated in the partition step. When=0.1, all the communities are combined; when=0.2, most of the communities are combined and the number of final communities is only 5; when=0.5, the generated communities are dispersed and small (24 of them have less than 10 nodes); when=0.3, we get 11 communities and this appear to be an appropriate number after we check the data manually. Hence we set=0.3 as the threshold. Another parameter to be set is the number of iterations. It is suggested that the partitioning result would usually become relatively stable after 5 iterations in . We observe that it is not completely stable after 5 iterations, i.e. the partitions of some nodes are still changed. To be safe, we set the number of iterations at 20 to make it more stable.",
               "It takes 8,702 seconds for the proposed community detection algorithm to complete on the whole graph. In this paper, we take the runtime of community detection as part of runtime of CGA algorithm. However, in practice the community detection could be regarded as a pre-processing step since after the community detection is done we can find top-K nodes with different K values. The algorithm partitions the whole network into communities. It returns 36 communities(ignoring very small communities), among which the size of the largest community is 95,690 and the others are smaller. The size distribution of extracted communities is shown in .",
               "As expected, the two heuristic methods run much faster than all greedy algorithms, especially Random needs only around 3 seconds. However, they perform poorly in terms of influence degree. This is consistent with the experimental results reported in previous work -\"significantly better marketing results can be obtained by explicitly considering the dynamics of information in a network, rather than relying solely on structural properties of the graph .\" This would also explain why the greedy algorithms are proposed and used for influence maximization in previous work although heuristic methods run faster. The heuristic methods do not take information influence model into consideration, and they cannot guarantee the precision.",
               "We find that CGA outperforms SPCGA in terms of influence degree while their runtime is similar. The only difference between them is community detection method. Hence, this demonstrates the usefulness of the proposed community detection method of CGA in finding top-K influential nodes."
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 14,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "n": "5.2.2",
               "text": "Varying K",
               "type": "experiment"
          },
          "paragraphs": [
               "This experiment is to evaluate the effect of the parameter K on the influence degree and efficiency of different algorithms. We fix the average influence speedat 0.05, network size at 723k and combination threshold at 0.3. We vary K from 1 to 30. The results are shown in (a) and 4(a). Note that the reported runtimes of CGA and SPCGA include the time used to detect communities, which are 8,702 seconds and 1,714 seconds, respectively. Note that we use logarithmic scale for y-axis in .",
               "It can be seen in (a) that 1) the influence degree of CGA is close to those of MixedGreedy and NewGreedy (the curve of MixedGreedy is almost overlapping with that of NewGreedy) at all values of K, and 2) the influence degree of CGA is much better than those of two heuristic methods DegreeDiscount and Random. For example, at K= 20, the influence degree of CGA is 89.96% of that of MixedGreedy while the influence degree of DegreeDiscount (resp. Random) is only 57.62% (resp. 55.72%) of that of MixedGreedy.",
               "We also observe in (a) that CGA is orders of magnitude faster than MixedGreedy. For example, at K= 20, CGA is 14.56 times faster than MixedGreedy. This is because CGA finds influential nodes in several communities, following the divide-andconquer principle; however MixedGreedy is based on the whole network. We also find that the speedup factor increases as we increase the value of K. This experiment is to compare with other algorithms in terms of influence degree and efficiency when we vary the average diffusion speed. We varyfrom 0.01 to 0.10 (0.01, 0.1 are used in ). This experiment is conducted on the whole network with 723,201 nodes and we set K = 20. shows that the influence degree of CGA is very close to the influence degree of MixedGreedy and NewGreedy at all values of. We observe that the influence degree of the two methods is nearly the same when< 0.07 (although it cannot be seen clearly in the ; the influence degree disparity between CGA and MixedGreedy becomes a bit larger as we increase the diffusion speed. This is because as the influence speed increases, a node in one community is more likely to influence the nodes in other communities, and thus the approximation of CGA would become less accurate. (b) shows that CGA runs orders of magnitude faster than MixedGreedy. We also find that when we increasethe efficiency of MixedGreedy drops quickly (almost exponentially) while the runtime of CGA only increases slightly.",
               "As the size of community is much smaller than the size of the whole network, increasingwould incur much more computation on the whole network than each community. This would explain why the runtime of MixedGreedy increases nearly exponentially while the runtime of CGA only increases moderately. Whenis smaller than 0.02, our CGA costs more time than MixedGreedy, this is because our CGA includes community detection time, the community detection time is relative large whenis very small. So CGA shows its advantages whenis larger than 0.02. Whenis larger than 0.06, experiments on MixedGreedy and NewGreedy cannot complete in 10 days, and thus we do not give the runtime in (b).",
               "It can be seen that the influence degree (precision) of DegreeDiscount and Random is much worse than those of greedy algorithms. For example, at= 0.01, the influence degree of DegreeDiscount (resp. Random) is 40.42% (resp. 29.87%) of that of MixedGreedy while CGA is 95.44% of MixedGreedy.",
               "As expected, DegreeDiscount and Random are much faster than all greedy algorithms that take into account Independent Cascade model. However, their precision is much worse than that of greedy algorithms, rendering the heuristic algorithms less attractive than greedy algorithms . "
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 15,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "n": "5.2.4",
               "text": "Scalability with the network size N",
               "type": "experiment"
          },
          "paragraphs": [
               "The objective of this experiment is to evaluate the scalability of CGA and other algorithms when we increase the network size. We set diffusion speedat 0.05 and K at 20. Figure 3(c) and show the results of influence degree and runtime, respectively, when we vary the network size N from 10K to 100K. Here we randomly select a node, and then starting from the node do a bread-first traversal to generate subnetworks of different sizes. (c) shows the influence degree is relatively stable across the networks of different sizes for all the methods. It is consistent with the previous experiments that the precision of the two heuristic methods is much worse than that of greedy algorithms. We can see from (c) that the runtime of both CGA and MixedGreedy increases with the increase of network size; however CGA scales better than MixedGreedy. "
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 16,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "n": "5.2.5",
               "text": "Varying ��",
               "type": "experiment"
          },
          "paragraphs": [
               "This experiment is to evaluate the effect of community combination threshold(i.e., the number of network communities in MSN) on the performance of CGA. This experiment is conducted on the whole network with 723,201 nodes and we set K = 20 and=0.05. Since this experiment is to study the effect ofon CGA, we do not compare with MixedGreedy. gives the number of communities detected when we increasefrom 0 to 0.6. The results of influence degree and runtime are shown in and 5(b), respectively.",
               "As shown in , the influence degree drops slowly as we increase. The reason is that CGA finds influential nodes within a community and does not consider the influences on nodes in other communities; thus as the network is partitioned into more communities, the precision of CGA will drop. shows that CGA runs faster with the increase of. The reason is that with the increase of, more communities will be generated and the average size of community will be smaller, thus CGA will run faster.",
               "We observe thatplays a tradeoff between the runtime and influence degree: with the increase of, CGA achieves better efficiency but at the price of slight loss of influence degree. For example, when we increasefrom 0.1 to 0.5, CGA runs about 39.63 times faster, while the influence spread drops about 38.25%. This is consistent with our theoretical analysis in Section 4. Note that whenis 0, CGA works on the whole network and is actually the same as MixedGreedy."
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 17,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     },
     {
          "head": {
               "n": "6.",
               "text": "CONCLUSIONS AND FUTURE WORK",
               "type": "conclusion"
          },
          "paragraphs": [
               "In this paper we propose a new algorithm called Communitybased Greedy algorithm for mining top-K influential nodes in a MSN. We first extend the basic Independent Cascade model to take weight edge of MSN into consideration. CGA has two main components, an algorithm for detecting communities by taking into account information diffusion, and a dynamic programming algorithm for selecting communities to find influential nodes. We also provide provable approximation guarantees for CGA. Empirical studies on a large real-world mobile social network show that our algorithm is more than an order of magnitudes faster than the stateof-the-art Greedy algorithm for finding top-K influential nodes and the error of CGA is small compared with Greedy algorithm.",
               "This work opens to several interesting directions for future work. Notably, it is relevant to take spatial information of mobile customers into consideration, and construct locations based social networks to find influential nodes; it is also interesting to study the evolution of influential nodes over time."
          ],
          "paper_id": "21bc7560-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 18,
          "fromPaper": "Community-based Greedy Algorithm for Mining Top-K Influential Nodes in Mobile Social Networks"
     }
]