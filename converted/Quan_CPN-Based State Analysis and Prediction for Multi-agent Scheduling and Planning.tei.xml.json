[
     {
          "head": {
               "n": "0",
               "text": "abstract",
               "type": "abstract"
          },
          "paragraphs": [
               "In Agent Based Scheduling and Planning Systems, autonomous agents are used to represent enterprises and operating scheduling/planning tasks. As application domains become more and more complex, agents are required to handle a number of changing and uncertain factors. This requirement makes it necessary to embed state prediction mechanisms in Agent Based Scheduling and Planning Systems. In this chapter, we introduce a Colored Petri Net based approach that use Colored Petri Net models to represent relative dynamic factors of scheduling/planning. Furthermore, in our approach, we first introduce and adopt an improved Colored Petri Net model which can not only analyse future states of a system but also estimate the success possibility of reaching a particular future state. By using the improved Colored Petri Net model, agents can predict the possible future states of a system and risks of reaching those states. Through embedding such mechanisms, agents can make more rational and accurate decisions in complex scheduling and planning problems."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 0,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "1",
               "text": "Introduction",
               "type": "introduction"
          },
          "paragraphs": [
               "Agents and multi-agent systems (MASs) have emerged as a new paradigm for developing software applications. Today, agent-based techniques are widely applied in many large scale, open and mission-critical applications, such as the electronic marketplace and supply-chain management. In the area of e-commerce, agent-based scheduling and planning offers a new way of thinking about project scheduling subject to resource constraints. In agent-based scheduling/planning systems (ASPSs), autonomous agents represent enterprises and manage the capacity of individual macro-resources in a production-distribution context. These agents provide an efficient and automatic way to achieve resource allocation and project management for enterprises.",
               "As application domains become more and more complex, ASPSs face a number of challenges. An increasingly necessary requirement for agents is to be able to flexibly and robustly communicate with each other in a changing and uncertain environment known as an open environment. At the same time, the limitations of current ASPSs are becoming apparent, especially with regard to the following two aspects:",
               "? Lack of mechanisms to support scheduling/planning among heterogeneous agents Most current multi-agent interaction mechanisms require agents to be hardcoded with interaction protocols. Hard-coding protocols actually merge agents into a part of the multi-agent interaction infrastructure. Being hard-coded with a particular interaction protocol, an agent cannot achieve interactions with agents with different interaction protocols. In most e-commerce applications, agents that represent different enterprises could be developed by different organisations and possess different interaction infrastructures. In such application domains, hard-coding interaction protocols could block interactions among agents from different enterprises. Therefore, scheduling/planning among heterogeneous agents, which represent different enterprises, could also be blocked."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 1,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "text": "? Lack of prediction mechanisms for dynamic environments",
               "type": "introduction"
          },
          "paragraphs": [
               "Scheduling and planning in stable environments is much easier than dynamic environments. In a dynamic environment, many factors that are related to scheduling results could be dynamic and changeable; changing these factors will greatly impact the accuracy and rationality of scheduling results. Furthermore, in many e-commerce applications, scheduling and planning could be operated synchronously with some other ongoing processes, such as negotiations. Decision making in scheduling and planning procedures will be impacted by the results of these ongoing processes as well. Ideally, a system should incorporate a prediction mechanism to estimate the change of key factors and possible results of on-going processes. However, most current ASPSs do not have such mechanisms to facilitate agents in achieving accurate and reasonable scheduling results.",
               "To overcome the above two limitations, in this research, we use Colored Petri Net (CPN) techniques to model agent scheduling and planning. The CPN is a high-level extension of the Petri Net (PN) . Petri Nets (PNs) and Colored Petri Nets (CPNs) are system modelling tools that can provide an appropriate mathematical formalism for the description, construction and analysis of distributed and concurrent systems. CPNs can express a great range of interactions in graphical representations and well-defined semantics, and allow formal analysis and prediction. PN and CPN are considered to be one of the best modelling tools for concurrent systems .",
               "In , we introduced a CPN-based strategy for multi-agent scheduling. In the strategy, CPNs are used to represent resource availability within a MAS. In this manner, agents are able to check the status of concurrent resources and make reasonable scheduling decisions. However, the strategy introduced in does not incorporate a mechanism to predict the change of dynamic factors in scheduling processes. This drawback could be a major encumbrance for agents in obtaining optimal scheduling results in dynamic environments. In this chapter, we present a CPN-based approach for agent scheduling and planning. In the approach, relative dynamic factors of scheduling/planning are considered and represented in robust CPN models. Furthermore, agents can predict the possible changes in these dynamic factors and make more reasonable decisions.",
               "The remainder of the chapter is arranged as follows. Some related concepts of PNs and CPNs are introduced in Section 2. In Section 3, a set of CPN state analysis and prediction methods is introduced. Then, an improved CPN model that allows agents to analyse the possibility of success of an ongoing process is presented in Section 4. In Section 5, we introduce how to use CPN-based methods to facilitate agents to achieve scheduling and planning. Finally, the chapter concluds in Section 6."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 2,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "2",
               "text": "Petri Nets and Colored Petri Nets",
               "type": "introduction"
          },
          "paragraphs": [
               "PNs and CPNs provide a framework for the construction and analysis of distributed and concurrent systems. A PN/CPN model of a system describes the states which the system may be in, along with the transitions between these states. In this section, we will briefly describe the basic concepts of PNs and CPNs."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 3,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "2.1",
               "text": "Petri Nets",
               "type": "introduction"
          },
          "paragraphs": [
               "A PN can be formally defined by the four-tuple :",
               "The meanings of the four parameters in this tuple are:",
               "1. Place set P = (p 1 , p 2 , ..., p n ): P is a set of places of a PN. A place p i can contain a number of tokens. The token availability of a place represents whether the resource/condition represented by the place is available. 2. Transition set T = (t 1 , t 2 , ..., t n ): T is a set of transitions of a PN. A transition t i normally represents an action or event within the system. 3. Arc set A: A is a set of directed arcs that link places and transitions together.",
               "Note: an arc can only link a transition and a place and cannot link transitions together nor places together. 4. Marking: A markingis an assignment of tokens to the places of a PN.",
               "Tokens are assigned to and can be transferred between the places of a PN. The number and position of tokens are changed during the execution of a PN, which meanswill be changed after each transition firing. shows a simple example of PN. In this example, P = (p 1 , p 2 , p 3 , p 4 ) and T = (t 1 , t 2 , t 3 ). Since p 1 and p 3 have one token and other places have no tokens inside, the current marking of the PN is= (1, 0, 1, 0). There are a number of transition firing rules associated with different types of PNs. Generally, the allocation status of tokens determines which transition(s) can be fired/executed. In addition, all kinds of PNs share the following common rules :",
               "1. A transition is enabled (or fired/executed) only if the token number of all input places of the transition is equal to or greater than their arcs' weights. Again, take the PN in as an example. According to the current marking of the PN, only t 3 can be fired because p 3 , which is the only input place of t 3 , has a token inside. 2. After a transition is fired, the tokens at its input places will be moved to its output places. 3. After a transition is fired, the number of tokens that are moved from/to each input/output place equals to the weight of the linking arc. Take the PN in as an example. t 3 has one input arc and one output arc that link t 3 with p and p 4 , respectively. Hence, after t 3 is fired, a token will be transferred from p 3 to p 4 . Therefore, after t 3 is fired, one token will be removed from p 3 and one token will be moved to p 4 . Also, the marking of the PN will be changed from= (1, 0, 1, 0) to= (1, 0, 0, 1) (see )."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 4,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "2.2",
               "text": "Colored Petri Nets",
               "type": "introduction"
          },
          "paragraphs": [
               "A CPN is a kind of high-level PN, and can be represented by a 9-tuple :",
               "The nine parameters in the tuple have the following meanings:",
               "1. The aggregation of colored sets: is a set of non-empty data-types, where each colored class is a token data-type of a CPN; 2. The place set P: is a set of places of the CPN. Each place is defined to contain tokens that belong to a particular color set; 3. The transition set T: is a set of transitions within the CPN; 4. The arc set A: is a set of arcs that link transitions and places within the CPN; 5. The color domain mapping function set F: is a set of mapping functions from A into PTTP ; 6. The color function set C: is a set of color functions that define P into; and checkFalse(m) are two flag-checking functions; E={sent(m), reply(m)}, where sent(m) and reply(m) are two arc functions that can modify token values; Responder and Sender places are defined to contain tokens with a type of MESSAGE. From this example, it can be seen that the data-types of tokens are defined in color sets, which can be complex data types. Through defining appropriate color sets, CPN tokens can be used to express significant information, such as schemas or specifications. Functions on the arcs of a CPN specify the token(s) that they can carry, and functions on output arcs that can modify tokens' value. In addition, CPN transitions are associated with guard functions that enforce some constraints on token values/colors."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 5,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "2.3",
               "text": "Mathematical Formats of CPNs",
               "type": "introduction"
          },
          "paragraphs": [
               "Generally, a CPN can be converted into a matrix form according to the following definitions. Suppose M is a CPN with a set of places P and a set of transitions T;is the set of color classes of M. F is the color domain mapping of M. P reN |P ||T | is defined as the backward incidence matrix of M, where P re[p, t] denotes the mapping from pP to tT ."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 6,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "text": "Definition 2. Suppose M is a CPN with a set of places P and a set of transitions T;",
               "type": "modelling"
          },
          "paragraphs": [
               "is the set of color classes of M. F is the color domain mapping of M. P ostN |P ||T | is defined as the forward incidence matrix of M, where P ost[p, t] denotes the mapping from tT to pP . Definition 3. For a CPN M with a backward incidence matrix Pre and a forward incidence Post, where P re, P ostN |P ||T | , C = P ost P re is defined as the incidence matrix of M, where is the difference operator of two unions of color sets.",
               "For example, and can be used to show the graphical and formal representations of a CPN M, respectively. According to Definition 1 and 2, we can have Pre and Post matrices of M, which are shown in . , af43, af52, af63} "
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 7,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "3",
               "text": "State Analysis and Prediction of CPNs",
               "type": "modelling"
          },
          "paragraphs": [
               "With a matrix format, a set of state analysis and prediction functions can be applied to a CPN. Through these functions, we estimate: (1) which transitions of a CPN are enabled in the current state; (2) whether a state (marking) is reachable in a CPN; and (3) what state the system will be in after a transition or set of transitions is/are fired. In this research, three state analysis and prediction functions are used to analyse and predict the future states of a particular domain. The analysis and prediction results will facilitate an agent to achieve scheduling/planning. In this section, the three functions will be introduced in detail."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 8,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "3.1",
               "text": "Transition Checking Function",
               "type": "modelling"
          },
          "paragraphs": [
               "For a CPN, to enable a particular transition, the current marking of the CPN must satisfy the conditions that are conducted by the arc and transition. Hence, we can use a Transition Checking Function (TCF) to check whether a transition in the CPN is enabled."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 9,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "text": "Definition 4. A TCF tcf (��, t j ) is a function from the marking �� into the boolean domain {true, false}. A TCF can check whether a transition t j is enabled with a marking ��. Suppose that M is a CPN with T, P, Pre, Post and C. �� is the current marking of M. t j �� T is a transition of M. Vector e[j] contains tokens that satisfy the minimum requirements which are defined on the guard function of t j . tcf (��, t j ) can be calculated via Equation 3, where operator denotes satisfying of conditions (on the guard function). t j is enabled with the current state �� if",
               "type": "modelling"
          },
          "paragraphs": [
               "tcf (t j ) = (P ree[j]) == true t j is not enabled with the current stateif"
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 10,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "3.2",
               "text": "State Prediction Function",
               "type": "modelling"
          },
          "paragraphs": [
               "Equation 3 is the TCF that evaluates whether a transition t j can be fired. Furthermore, we can also predict the future state of the CPN after t j is fired."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 11,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "text": "Definition 5. Suppose that transition t j is an enabled transition of CPN M with the current marking ��. A State Prediction Function (SPF) spf (��, t j ) is a function from the marking �� to another marking ��",
               "type": "modelling"
          },
          "paragraphs": [
               ", whereis the result marking of firing t j (i.e. the marking after t j fires). spf (, t j ) can be calculated by using Equation 4, where is the difference operator of two color set unions, ? is the combination operator of two color set unions, and ? denotes the color transformation of a token by using an arc function in Pre or Post."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 12,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "3.3",
               "text": "State Checking Function",
               "type": "modelling"
          },
          "paragraphs": [
               "Based on TCF and SPF, we can also check whether a state is reachable in a CPN. This checking can be achieved by using a State Checking Function (SCF). "
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 13,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "4",
               "text": "Success Possibility Analysis",
               "type": "modelling"
          },
          "paragraphs": [
               "The TCF and SCF introduced in Section 3 can only have two possible outputs: true (which means a transition t j is enabled) or false (which means a transition t j is not enabled). However, in many MAS applications, it is more rational to use a numeric domain to represent future states of a MAS rather than a boolean domain. For example, in an agent negotiation system, it is not easy to predict whether the negotiation will succeed (or fail) in a particular round. However, it will be much easier and rational to evaluate the possibility of success of the negotiation. Therefore, in this research, we develop possibility analysis functions to predict the likelihood of a future state in a MAS."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 14,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "4.1",
               "text": "Improved CPN Models for Possibility Analysis",
               "type": "modelling"
          },
          "paragraphs": [
               "Traditional CPN theory does not have a mechanism to allow the analysis of success possibilities of actions within a system. A traditional CPN model only includes guard functions to control the firings of transitions. In this research, we not only consider whether a transition can be fired, but also the possibility of firing a transition successfully. Hence, we improve the traditional CPN model, and combine a success function with each CPN transition beside a guard function.  shows a simple example that compares the difference between a traditional CPN model and an improved CPN model. (a) shows a traditional CPN model. In the traditional model, the only color domain is the set of natural numbers N. Transition t 1 could be fired if place p 1 contains a token which is greater than 0 and smaller than 10 (this is controlled by the guard function gf 1 ). If t 1 is fired, a token will move from p 1 to p 2 , and the value of the token will by increased by 1. The improved model ( ) is very similar to the traditional one. The only difference is that it has a success function spf 1 = x/10 combined with t 1 . The success function indicates that the success rate of firing t 1 depends on the value of x (value of the input token). t 1 has a higher likelihood of being fired successfully if x is closer to 10. "
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 15,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "4.2",
               "text": "State Possibility Evaluation",
               "type": "experiment"
          },
          "paragraphs": [
               "where FS is the transition firing sequence to transfer M from stateto state, and sf j is the success function of t j (Definition 7)."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 16,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "5",
               "text": "Applications of CPN-Based State Analysis and Predictions in Multi-agent Scheduling and Planning",
               "type": "experiment"
          },
          "paragraphs": [
               "There is consensus that CPNs are one of the best ways to model concurrent systems. In the context of AI, there are a number of works which use PNs or CPNs to model various multi-agent interactions of MAS applications . In this research, CPNs are used to facilitate agents to achieve scheduling and planning."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 17,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "5.1",
               "text": "Agent-Based Scheduling and Planning Systems",
               "type": "experiment"
          },
          "paragraphs": [
               "ASPSs are widely used in many e-commerce applications . In an ASPS, agents are used for production scheduling, resource allocation and project planning problems. Due to the nature of e-commerce application domains, most ASPSs need to work in open dynamic environments. In such environments, agents need to handle various dynamic factors which may greatly impact on scheduling/planning. For example, in a manufacturing enterprise, some production resources are obtained via negotiation with vendors, and some manufacturing procedures through cooperating with other enterprises. Obviously, the scheduling problems in this enterprise are related to those negotiation and cooperation outputs, which are not fixed and dynamic (see ). "
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 18,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "5.2",
               "text": "Using CPNs to Model Scheduling and Planning Problems",
               "type": "modelling"
          },
          "paragraphs": [
               "In this research, we use CPNs to model supply-demand and cooperation relationships, which are related to a scheduling/planning problem, among different enterprises. To build this kind of CPN models, CPN elements are used to represent the following factors:",
               "? Transitions: a transition t j of a CPN is used to represent a related process that impacts on scheduling/planning, such as a negotiation or a manufacturing process; ? Input Places: input places of a transition t j are used to represent the resources required to process t j ; ? Output Places: output places of a transition t j are used to represent the generated products after t j is processed; ? Marking: a markingrepresents resource availability within the system;",
               "? Guard Function: a guard function gf j of a transition t j is used to represent the condition of processing t j ; and ? Success Function: if gf j can be satisfied, the success function sf j of a transition t j is used to represent the possibility of processing t j successfully. demonstrates an example of using a CPN to model a scheduling problem. In this example, Enterprise A wants to schedule its resources to produce two potential products, D and E. To produce D, Enterprise A needs to consume Resource A and Fund. To produce E, Enterprise A needs to consume Resource B and Fund. According to the marking of the CPN, it can be seen that Enterprise A does not "
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 19,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "5.3",
               "text": "CPN Based State Analysis and Predictions",
               "type": "modelling"
          },
          "paragraphs": [
               "Based on the CPN models introduced in the previous subsection, a set of state analysis and prediction methods can be applied to facilitate agents to obtain scheduling/planning solutions. Firstly, we can use Transition Checking Functions (TCFs) (Subsection 3.1) to determine the enabled procedures in the current state. Then State Prediction Functions (SPFs) (Subsection 3.2) can be applied to estimate the future state after processing a particular procedure. If an agent has a particular \"target state\" to reach, State Checking Functions (SCFs) (Subsection 3.3) can be used to evaluate whether the \"target state\" is reachable. Furthermore, the possibility analysis methods introduced in Section 4 can assist agents to estimate the success rate of each procedure or a set of procedures. Taking the CPN model in as an instance, by using Equation 3, we find that only transitions Negotiate A and Produce E are enabled in the current state.",
               "However, by using SPF and SCF , we find that Produce D can be enabled after Negotiate A is fired. In addition, we can also calculate the success rate of Produce D and Produce E by using Equations 6 and 7, respectively (refer to Section 4). From Equation 7, it can be seen that the success rate of producing E is 1 (100%). According to Equation 6, we see that the success rate of producing D depends on the input of Negotiate A.",
               "spef P rod.e = sf P rod.E = 1 (7)"
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 20,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "5.4",
               "text": "Example",
               "type": "modelling"
          },
          "paragraphs": [
               "Benefited from CPN-based state analysis and predictions, agents can achieve more rational scheduling in dynamic domains. In this subsection, we present an example to demonstrate advantages of the approach. Suppose that the producing processes of an enterprise is described in the CPN model of . The enterprise can produce two kinds of products, i.e. RC and RD, which are represented by place RC and place RD, respectively. RA and RB (represented by place RA and place RB, respectively) are two required resources for producing RC. RB is the required resource for producing RD. The enterprise can gain benefits via selling RC and RD. In the CPN model, place FundA and place FundB are used to represent the fund for purchasing RA and RB, respectively. Place Fund is used to represent the income of the enterprise via selling RC and/or RD. The scheduling goal is to maximise the benefit of the enterprise with minimum costs, i.e. M AX(F und ? (F undA + F undB)).",
               "In this example, we suppose that the buying and selling processes need to be achieved via negotiations. Hence, outputs of transition BuyRA, BuyRB, SellRC and SellRD are uncertain but related to input values. For these four transitions, higher input values (e.g. higher offers) will result higher success possibilities.",
               "Success functions for negotiations depend on application domains and negotiation strategies. In this example, we use two simple functions as success functions for buying and selling processes. In the CPN model, we use Equation 8 as success function for buying processes (i.e. BuyRA and BuyRB), where offer is the proposed offer of the enterprise and MaxMarketPrice is the maximum market price of the resource (the price that can guarantee the enterprise to purchase the resource successfully). The success function for selling processes (i.e. SellRC and SellRD) is shown in Equation 9, where price is the selling price of the enterprise and MinMarketPrice is the minimum market price of the product (the price that can guarantee the enterprise to sell the product successfully). According to methods introduced in Section 4, we can calculate the success rate of producing RC and RD by using Equation 10 and Equation 11, respectively. As the minimum market price of RC is higher than RD (see ), the enterprise can obtain higher benefits by producing RC. However, as shown in Equation 10 and Equation 11, we can see that the success rate of producing RC is higher than producing RD. Then, the enterprise can calculate potential risks and benefits with different input combinations, then make negotiation and scheduling strategies. "
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 21,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     },
     {
          "head": {
               "n": "6",
               "text": "Conclusions",
               "type": "conclusion"
          },
          "paragraphs": [
               "ASPSs are facing a number of challenges which are brought about by dynamic working environments and changeable factors. It is necessary to include a state analysis and prediction mechanism in an ASPS to allow agents to analyse and predict future states of the system. CPNs provide a framework for the construction and analysis of distributed and concurrent systems. In addition, CPN theory also provides a set of state analysis and prediction methods for concurrent systems. In this chapter, we used CPN models to represent relative dynamic factors of an ASPS. By using these CPN models, agents can read, analyse and predict current/future states of a system. Furthermore, in our approach, we first introduced and adopted an improved CPN model which can allow agents to estimate the success possibility of reaching a particular future state. By embedding CPN-based state analysis and prediction mechanisms within an ASPS, agents can make more rational and accurate decisions when dealing with complex scheduling and planning problems, and be more adaptable to dynamic working environments."
          ],
          "paper_id": "239c58f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 22,
          "fromPaper": "CPN-Based State Analysis and Prediction for Multi-agent Scheduling and Planning"
     }
]