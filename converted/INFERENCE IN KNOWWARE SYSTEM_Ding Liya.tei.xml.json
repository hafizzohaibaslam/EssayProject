[
     {
          "head": {
               "n": "0",
               "text": "abstract",
               "type": "abstract"
          },
          "paragraphs": [
               "Knowware System (KWS) has been proposed as a framework of intelligent tool for modeling and development of knowledge-based system. It is to support application developers in constructing customized hybrid intelligent system without the necessity of being familiar with relevant AI techniques. As a continued work of previous studies of KWS, this article discusses the development of KWS inference engine from the aspects of truth value flow inference, confidence handling, protocol between intelligent components in knowledge hierarchy, control of execution, and feedback handling, and provides key algorithms. Keywords: KWS inference engine; Truth value flow inference; Knowware system; Construction of knowledge-based system monitor and control the dynamic execution of KBS, including protocol management, confidence handling, and order of execution. As a continued work of previous discussion [2-7], this article discusses the inference mechanism in KWS and provides key algorithms for the KWS inference engine. The rest of the article is structured as follows. Section 2 describes the KWS scheme as well as the modeling and construction of customized KBS. Section 3 is dedicated to the mechanism of the KWS inference engine. The discussion of inference in a target KBS constructed by KWS is further carried out in Section 4. Conclusions are presented in Section 5. 2. Knowware System"
          ],
          "paper_id": "225a3c00-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 0,
          "fromPaper": "INFERENCE IN KNOWWARE SYSTEM"
     },
     {
          "head": {
               "n": "1.",
               "text": "Introduction",
               "type": "introduction"
          },
          "paragraphs": [
               "A knowledge-based system (KBS) especially a hybrid intelligent system is, in some sense, a set of knowledge-based processing units inter-connected in an appropriate way to ensure a desired inference flow. Knowware System (KWS) has been proposed to support KBS developer by offering a set of intelligent components together with the function of automatic construction. Thus, the user (KBS developer) can easily input his/her design ideas as well as domain knowledge, and deploy KWS to construct a customized KBS based on the information and knowledge sources provided. This concept is general, and not necessarily limited to any specific application.",
               "The inference structure of a KBS constructed by KWS is represented as a knowledge hierarchy connecting multiple intelligent components associated with corresponding knowledge for problem solving. The task of construction of knowledge hierarchy can be done either through the interactive graphic editor or the processor of knowledge description language (KDL) . Such a knowledge hierarchy represents statically the inference structure of the target KBS. In order to make it a complete stand-alone application, an inference engine is necessary to One of the objectives of KWS is modeling useful patterns of knowledge-based processing in relevant application domain, and developing a set of intelligent processors that serve as intelligent components for the construction of hybrid intelligent system. Individual intelligent processors may process data, information and knowledge of different types, adopt different inference mechanisms that are suitable to inputs and outputs of varying nature.",
               "The key idea of hierarchical representation for KBS is hybrid KBS, consisting of multiple sub-KBS's in a hierarchical structure. shows the concept. KWS not only allows developers to easily design their system, but also realizes an automatic construction of the target KBS based on the developers' design. "
          ],
          "paper_id": "225a3c00-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 1,
          "fromPaper": "INFERENCE IN KNOWWARE SYSTEM"
     },
     {
          "head": {
               "text": "978-1-4244-3703-0/09/$25.00 ?2009 IEEE 215",
               "type": "introduction"
          },
          "paragraphs": [
               "Developers can use the Knowledge Description Language (KDL) text to describe their system, and the text is an input to KWS with the KBS constructed as the corresponding output. The KBS constructed will be a stand-alone application, so the end-user can use it easily and needs not to care about the details of implementation."
          ],
          "paper_id": "225a3c00-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 2,
          "fromPaper": "INFERENCE IN KNOWWARE SYSTEM"
     },
     {
          "head": {
               "n": "2.1.",
               "text": "KWS Scheme",
               "type": "introduction"
          },
          "paragraphs": [
               "A typical KWS consists of three major parts: (a) the inference engine; (b) the warehouse of knowware (intelligent components); and (c) the KWS utilities including an interactive editor, a KDL processor, a tester and an installer. The inference engine will be further discussed in the next section."
          ],
          "paper_id": "225a3c00-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 3,
          "fromPaper": "INFERENCE IN KNOWWARE SYSTEM"
     },
     {
          "head": {
               "n": "2.2.",
               "text": "Warehouse of Knowware",
               "type": "introduction"
          },
          "paragraphs": [
               "The warehouse stores pre-defined knowledge-based processors (intelligent components) that are the basic building blocks of KBS. Intelligent components are further classified by the nature of processing, in terms of the corresponding input and output.",
               "A KWS offers a set of k classes of intelligent components. Any intelligent component under same class always follows the same syntax for the interface with other intelligent components no matter which specific problem solving approach is adopted for the knowledge-based processing inside it. At the same time, intelligent components under the same class may behave differently when different approaches of knowledge-based processing adopted in problem solving. We have designed ten classes of intelligent components under two different categories: processing components and learning components . KWS also accepts user-defined procedure for any of the classes offered. An intelligent component has input field(s) and one output field. An input field can be a data receiver directly connecting to application, or an output from other intelligent component.",
               "In the rest of discussion, when a component C p receiving input from the output of some other component C c , C p will be mentioned as 'parent component' and C c 'child component' to indicate their relative position in the knowledge hierarchy. Furthermore any parent component of C p will be considered as an 'ancestor component' of C c . and (d) Installer. In order to develop a desired intelligent system, the developer can choose any of the knowware that fits into his/her need, through two possible ways. One is to define his/her target system in KDL text and then call the KDL processor for compilation to generate the internal inference structure which is conceptually a knowledge hierarchy. The other alternative is to use the interactive editor to design the target system step-by-step and get the target system constructed after test and confirmation. In the later case, the interactive editor also generates a corresponding KDL text so the developer can make modification conveniently later on. For a KBS successfully constructed, the installer will save the internal inference hierarchy to a text file in a suitable format, and packs the knowledge hierarchy with the KWS inference engine as well as the installer itself to a stand-alone target application. The embedded installer will be responsible to reload the saved KBS upon user's calling of the application. shows the data flow and control flow. One of the main challenges facing KWS for the construction of intelligent system is the complexity associated to inference mechanism having multi-level, and multi-modal knowledge integration. Each single intelligent component is actually a smaller KBS for a sub-problem of the target application, and its input and output can be directly linked to problem domain, or the result from different stages of processing. How to assemble intelligent components to get a meaningful and unified data/information flow in the entire intelligent system constitutes a key task.",
               "There are several issues for the inference in KWS:",
               "(a) how to set up a set of protocols to ensure a valid data flow among intelligent components in target KBS; (b) how to determine a correct order of the execution when running a target application; and (c) how to realize a possible feedback among intelligent components.",
               "hierarchy, l0, which is determined by the Algorithm-1. The protocol between intelligent components is solved from three levels: syntax, semantics and data type. With the general classes of intelligent components defined, we have syntactical rules indicating the possible connections between different classes. For instance, a component of Confirmation class is allowed to send its output to the input of a component of Decision class, but not allowed to do the same to the input of a component of Filtering class.",
               "For each allowable connection between classes, we further set semantic rules with more details to specify legal connections. At the child-to-parent point of view, there are four kinds of protocol for the data type of implementation:",
               "(a) single-to-single; (b) single-to-multiple; (c) multiple-to-single; and (d) multiple-to-multiple. They will have different impact to the execution when bidirectional reasoning with feedback is considered. We shall discuss it in the later part of this section.",
               "f 10 *} . Order of Execution without Feedback"
          ],
          "paper_id": "225a3c00-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 4,
          "fromPaper": "INFERENCE IN KNOWWARE SYSTEM"
     },
     {
          "head": {
               "n": "3.2.",
               "text": "Control of Execution",
               "type": "introduction"
          },
          "paragraphs": [
               "With a knowledge hierarchy constructed by KWS, an appropriate order of execution of individual intelligent components needs to be determined, though a parallel processing is logically allowed for the components at a same level of the hierarchy. We solve this problem using a global execution list controlled by the KWS inference engine. At any time point during processing, there will be only one component under execution. The KWS inference engine uses two parameters of component for this purpose: one is component's level in hierarchy which is assigned based on the static structure of knowledge hierarchy, and the other one is a dynamic state of execution which is updated from time to time during processing.",
               "Algorithm-1 (Determine the level of component and field):",
               "1) For a filed f that receives input data directly from application, set l(f) = 0; 2)",
               "For a field f that serves as the output field of component C,",
               "A field or component is associated with its level in",
               "In the example shown in , f 1 , f 2 , f 3 , f 4 and f 5 are at level-0; C 1 , C 2 , C 4 , f 6 , f 7 , and f 9 are at level-1; C 3 and f 8 are at level-2; and C 5 and f 10 are at level-3, respectively.",
               "A field or a component is dynamically assigned one of the states: Run, Rerun, and Finish, showing its current state of execution.",
               "(a) Run: representing a component \"waiting for execution\", or a field \"waiting for obtaining result\"; (b) Rerun: representing a component \"been required to redo the inference with new input data\", or an output field \"waiting for obtaining new result of redo\"; (c) Finish: representing a component \"finished processing\", or a field \"finished obtaining result\".",
               "A global execution list is set up to keep all the fields and components of the knowledge hierarchy for the trace of execution. In an execution list, all the components and fields are sorted to a nondecreasing order according to their level. shows an order of execution on knowledge hierarchy with no feedback considered, where f i * (i = 1, ..., 10) indicates that filed-i is of Finish, C j * indicates that component-j (j = 1, ..., 5) is of Finish, and underlined component C j indicates that component-j is currently under execution. At step-6, all the fields and components are of Finish, so the processing has been finished successfully. It follows the manner of forward chaining with a bottom-up direction of execution on the hierarchy. Obviously, a nondecreasing order of level of components guarantees a topological sorting of the execution sequence of components based on their supporting relation described in the static knowledge hierarchy.",
               "The procedure execution() in Algorithm-2 is to call the specific component for knowledge-based processing. When the inference engine calling execution(C r ), it passes the control to the component C r and waits for the return of execution result. When a feedback of reasoning is considered, necessary interruption should be introduced to adjust the execution sequence. Algorithm-2 does the main job of execution control but calls Algorithm-3 (PartialRedo) to take care of feedback handling."
          ],
          "paper_id": "225a3c00-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 5,
          "fromPaper": "INFERENCE IN KNOWWARE SYSTEM"
     },
     {
          "head": {
               "n": "3.3.",
               "text": "Feedback Handling",
               "type": "introduction"
          },
          "paragraphs": [
               "An unsolved issue left in is the mechanism for bidirectional inference within part of the knowledge hierarchy. Considering an inference carried out in a KBS constructed by KWS, when an intelligent component failed to work out a solution as its output with its local knowledge source, an effort is expected to \"bring back\" the process to those field(s) or component(s) that provided the input(s) to it. It introduces a need of bidirectional inference within part of the knowledge hierarchy. This is achieved by the Rerun control of the KWS inference engine.",
               "A component under Rerun state means it is not successful in the previous run of inference and needs 'redo' the task to provide new (better) result. The handling of redo starts by asking new input from child component(s), according to the type of protocol between an input field of component C r currently under Rerun and the output field of its corresponding child component C c . The main algorithm is given in Algorithm-3 with further implementation details omitted.",
               "When the inference engine calling getNext(C c ), it If reExecution(C c ) /* successful */ Then set C c and its output field as of Finish; setRunAncestor(C c ); Return; /* go to check next input field of C r */ /* end of 1 st for */ 2) For each of the h (h1) input fields of C r : f cr1 , f cr2 , ..., f crh , If it is a direct input from application Then stop processing and report failure Else /* it is the output field of some child component C c */ set C c and its output field as of Rerun; /* end of 2 nd for */",
               "In case that a single child component is supporting multiple parent components, a data inconsistency should be avoided when partial feedback and redo are considered. This consistency is guaranteed by indicating the current frozen area. A component C c being required for a 'rerun' by one of its parent components C r will cause a temporary 'frozen' execution to other related components. A 'frozen' action affects two groups of components: (a) all components of Run state at a level equal to or higher than currentFrozen; (b) all components of Rerun state at a level higher than currentFrozen.",
               "The 'frozen' strategy taken to guarantee data consistency has some drawbacks: when a component of Rerun has multiple child components that may provide new input, the sequence of inference result is not necessary to be optimal in terms of the confidence level; and the candidates obtained form only a subset of all possible combinations. Further development effort will be needed for these issues. "
          ],
          "paper_id": "225a3c00-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 6,
          "fromPaper": "INFERENCE IN KNOWWARE SYSTEM"
     },
     {
          "paragraphs": [
               "In a hybrid KBS with intelligent components of varied natures, the representation format of content before and after the processing of each component can be different in general. In order to have a unified inference flow, we adopted the concept of truth value flow inference (TVFI) . The inference in a hybrid KBS constructed by KWS is an extended truth value flow inference on the knowledge hierarchy , i.e. the node (fuzzy proposition) in TVFI is extended to be an intelligent component that has internal inference algorithm(s) with necessary knowledge source(s) represented in appropriate format.",
               "Compared with a typical fuzzy inference system, , a hybrid KBS constructed by KWS usually does not have a universal knowledge base but multiple knowledge sources associated with individual intelligent components. In this sense, each knowledge source has only a local affection to the corresponding intelligent component realizing a mapping relation between its input and output. The inference flow is handled at the content level and the truth (confidence) level separately and simultaneously. The content of inference relies only on the knowledge sources stored \"locally\" in individual intelligent components whereas the truth (confidence) of inference contributes to the flow of truth (confidence) throughout the entire KBS. "
          ],
          "paper_id": "225a3c00-97d4-11e8-9580-1f0eb29018a9",
          "head": {
               "type": "introduction"
          },
          "paragraphNo": 7,
          "fromPaper": "INFERENCE IN KNOWWARE SYSTEM"
     },
     {
          "head": {
               "n": "4.2.",
               "text": "Interval-valued Confidence and Operations",
               "type": "introduction"
          },
          "paragraphs": [
               "Instead of single-valued confidence, interval-valued confidence (IVC) is used to describe the truth of fact or knowledge, and the confidence of inference . An IVC value is a fuzzy number defined on the closed interval and represented in the following general format: .",
               "A single-valued truth t[0, 1] of a fact received from application domain is represented as: T = (a, m, b) with the left point a = t, the right point b = t, and the middle point m = t. An interval-valued truth , 0ab1, of a fact Given two arbitrary intelligent components A and B, having the output of A linked to the input of B means its content is passed on for further knowledge-based processing in B, and at the same time its confidence is involved in the calculation of the confidence of output of B. Therefore, an intelligent component needs to distinguish the uncertainty associated with external input or introduced by its internal inference. We represent the former as input confidence, and the latter result confidence. When an intelligent component (IC) uses less interpretable knowledge representation, such as neural networks, or case-based reasoning, the mapping relationship realized by the IC may not be interpreted through its internal inference structure. The concept of truth base introduced with the exponential form of fuzzy logic has been adopted for the interpretation of confidence transfer . The concept of truth base introduced with the exponential form of fuzzy logic has been adopted for the interpretation of confidence transfer . Therefore, a further extension to the framework of truth value flow inference is achieved through two steps: (1) First carry out the internal inference of such an IC by assuming that the input is completely true (i.e. with full confidence); (2) Combine the input confidence with the result confidence as one unified output confidence at the output side of an IC after processing."
          ],
          "paper_id": "225a3c00-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 8,
          "fromPaper": "INFERENCE IN KNOWWARE SYSTEM"
     },
     {
          "head": {
               "n": "4.4.",
               "text": "Fuzzy Granulation in KBS Modeling",
               "type": "modelling"
          },
          "paragraphs": [
               "Modeling of hybrid intelligent system can be achieved through possible partition of the problem space at different levels. A KBS constructed by KWS is, in general, a hybrid intelligent system. The static inference structure of KBS is a knowledge hierarchy that describes the problem space with different levels of resolution in appropriate partition. Each granule is determined based on the availability of knowledge sources.",
               "In our early discussion about data consistency when feedback occurred to a child component that supports multiple parent components, it is assumed that all the partitions are non-fuzzy. When possible fuzzy partition is considered, multiple parents may possibly pick up different parts of data from the same fuzzy granule (child) for further processing, and on the other side, to a same parent component a possible overlap between child components (fuzzy granules) may also occur. In this case, some new inference strategy will be needed besides the 'frozen' execution. The realized mechanism of feedback handling in KWS offers a possibility for partial feedback in knowledge hierarchy, and also leaves a space for future extension of fuzzy granulation in KBS modeling and so computing with words ."
          ],
          "paper_id": "225a3c00-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 9,
          "fromPaper": "INFERENCE IN KNOWWARE SYSTEM"
     },
     {
          "head": {
               "n": "5.",
               "text": "Conclusion",
               "type": "conclusion"
          },
          "paragraphs": [
               "We discussed the KWS inference engine mainly through the aspects of protocol between intelligent components, order of execution, and feedback handling; and provided three key algorithms for the control of inference in KWS. We also briefly discussed the inference in KBS constructed by KWS as an extended truth value flow inference and explored the possibility of modeling hybrid KBS with fuzzy granulation, which gives an important topic of our future work."
          ],
          "paper_id": "225a3c00-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 10,
          "fromPaper": "INFERENCE IN KNOWWARE SYSTEM"
     }
]