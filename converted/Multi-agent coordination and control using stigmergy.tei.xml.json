[
     {
          "head": {
               "n": "0",
               "text": "abstract",
               "type": "abstract"
          },
          "paragraphs": [
               "This paper describes and discusses a novel design and a prototype implementation for manufacturing control systems, aimed at handling changes and disturbances. This novel design utilizes the concept of a multi-agent system. Agents in this system use an indirect coordination mechanism, called stigmergy. Stigmergy is a class of mechanisms that mediate animal-animal interactions. It consists of indirect communication that is taking place between individuals of an insect society by local modifications induced by these insects on their environment. The coordination mechanism in this paper is based on a technique used by food foraging ants. Food foraging ants provide the inspiration by the manner in which they spread information and make global information available locally; thus, an ant agent only needs to observe its local environment in order to account for non-local concerns in its decisions. A prototype was built to test the coordination technique. The prototype comprises a flexible manufacturing system model/emulation that has dynamic order arrival, probabilistic processing time, and some general perturbations such as machine breakdowns. The prototype served to investigate a specific research question: is it possible to create short-term forecasts based on the intentions of the agents. It has been intentionally kept simple to facilitate the understanding of what is happening in the system. Size and complexity of the prototype implementations are being augmented gradually in ongoing research. #"
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 0,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "1.",
               "text": "Introduction",
               "type": "introduction"
          },
          "paragraphs": [
               "The manufacturing function in a company nowadays is viewed either as a competitive weapon or as a corporate millstone . The old strategy of mass production derived from notions of economies of scale is no longer seen as valid and is being discarded in favor of a strategy that facilitates flexibility, reduced design cycle times, reduced time to market for new products, and reduced order lead times for the customer. These situations create the need for a novel design for manufacturing control systems that is able to manage such situations effectively and efficiently. Traditional centralized systems, hierarchical manufacturing control architectures and their top-down development cannot cope with the increased rate of changes in manufacturing systems. Currently, the changes are tackled on a case-by-case basis by introducing expensive, time-consuming ad hoc solutions, where these solutions are not rigorous enough to face other changes that appear afterwards. The concept of a multi-agent system offers a solution consisting of a set of non-centralized, mutually co-operating elements-agents-each of which acts autonomously. These multi-agent systems are suited to the distributed manufacturing environment, since the manufacturing applications presents characteristics like modularity, decentralized activities, frequent changes, ill-structured and complex tasks, for what the agent solutions are known to be suited . In such system, agents exchange information and knowledge in order to achieve the desired kind of collaboration.",
               "The main overall objective of the research, which is discussed in this paper, is to achieve advances in the design and engineering of manufacturing control systems. Indirectly, the developments create opportunities for achieving a high performance through advanced multi-agent manufacturing control, but the research is not aiming at optimized system performance over a narrow operating range. The research rather aims at carving out control system components that remain reusable over a wide range of manufacturing systems and operating conditions. This answers the industrial need to cope with the ever-increasing pace at which manufacturing systems have to handle changes and disturbances. The research aims to reduce the time and effort needed to develop and maintain an advanced manufacturing control system under such present-day and future conditions. In addition, the design of this system also provides a plant manager more, better and up-to-date information on which the manager can apply optimizing decision rules and methods, but situation-and plant-specific knowledge in such rules/methods will continue to make a significant difference. Moreover, this paper is also investigating whether (emergent) forecast can become part of the stable core of a system design.",
               "The research prototype builds on two developments:",
               "More precisely, the research uses ant colony coordination methods to make global information locally available. This information reflects relevant facts, which are useful for implementations of the actual control decision mechanisms. These facts include the intentions of the agents in the system, and the shortterm forecasts that can be derived from them. Important is that the system is designed out of agents that have limited exposure, enabling them to serve in many situations over long periods of time without maintenance. The overall manufacturing control system is self-configuring and continuously rediscovers the underlying system to cope with change and uncertainty.",
               "Section 3 presents the multi-agent control system design itself. Section 4 discusses the implementation and the results obtained. Finally, concluding remarks and future research are addressed."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 1,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "2.",
               "text": "Multi-agent coordination, PROSA and stigmergy",
               "type": "introduction"
          },
          "paragraphs": [
               "This section discusses the technologies and developments on which the manufacturing control prototype relies."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 2,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "2.1.",
               "text": "PROSA",
               "type": "introduction"
          },
          "paragraphs": [
               "The PROSA architecture . Stigmergy or, more specifically, engineering concepts inspired by ant colony coordination mechanisms .",
               "Section 2 introduces the above-mentioned developments in more detail. Note however, concerning the ant colony mechanisms, that the presented research does not share ambitions with well-known research on ant colony optimization (ACO) ; it differs significantly in that optimization is a secondary concern whereas system engineering is the primary concern.",
               "In the research discussed in this paper, agent technology serves to achieve a high level of reusability, robustness against changes, disturbances and uncertainty, and to have system components (agents) with limited exposure to system properties outside their own area of expertise . The prototype system implements an instantiation of a specific agent architecture: PROSA . PROSA is a reference architecture for agent societies; it does not specify the agents' internal structure.",
               "The PROSA architecture is built around three types of basic agents: order, product and resource agents. Each of them is responsible, respectively, for one aspect of manufacturing control: (i) internal logistics, (ii) recipes or process plans, and (iii) resource handling. These basic agents are structured using objectoriented concepts like aggregation and specialization. Staff agents can be added to assist the basic agents with expert knowledge.",
               "Each resource agent corresponds to a production resource in the manufacturing system and contains an information processing part that controls the resource. Each product agent owns a ''product model'' of a product type-not the ''product state model'' of one physical product instance being produced. A product agent acts as an information server to the other agents, delivering the right recipes in the right place. Each order agent represents a task. It is responsible for performing the corresponding work correctly and on time. It manages the physical product(s) being produced, the product state model, and all logistic information processing related to the job.",
               "Note that many PROSA agents are aggregates consisting of multiple agents. In particular, agents can create new agents that virtually travel through the manufacturing system to create and maintain the dissipative fields (see further) that coordinate the behavior of the individual agents."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 3,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "2.2.",
               "text": "Stigmergy in ant colonies and multi-agent systems",
               "type": "introduction"
          },
          "paragraphs": [
               "Stigmergy is a class of mechanisms that mediate animal-animal interactions . Pierre-Paul Grassintroduced the concept in 1959. The term stigmergy itself is constructed from two Greek words, stigma, which means sign, and ergon, which means work. In the writings of Grass, it describes the indirect task coordination and regulation in the context of nest reconstruction in termites of the genus Bellicositermes. More in general, it describes that indirect communication is taking place between individuals of an insect society by local modifications induced in their environment. According to the term stigmergy, a sign (stigma) in the environment triggers an action (ergon) within the insect society. An insect observes its local environment and is motivated to certain action because of the current state of the environment. Using stigmergy, for instance, ants are able to find shortest paths between nests and food sources, sort their brood, and build nests.",
               "There are two concepts for changing the environment resulting in two flavors of stigmergy, i.e. sematectonicand sign-based stigmergy . With sematectonic stigmergy, a change in the physical characteristics of the environment stimulates further activities of the insects (agents). Activities like the piling-up of mud by termites stimulate other termites to add material to such a structure. Nest cleaning behavior of ants illustrates very well this form of stigmergy: as ants clean the nest, they change their environment (the nest becomes cleaner), therefore other ants stop engaging in this activity and the cleaning eventually stops. It will start again when dirt accumulates again. Brood sorting or the piling of dead ants uses this mechanism as well.",
               "In sign-based stigmergy, a signaling mechanism is used to coordinate the insects (agents). Here, the animals are not stimulated by an evolving result of their activities, but use an extra task-independent mechanism. Investigations of biological insect societies show that these animals coordinate themselves by producing a dissipative field in their environment. Ants interact by spreading a smelling chemical substance-pheromones (stigma)-into their neighborhood during their activities. Such a deposition of scent or pheromones modifies the environment for other ants and determines their activities in a certain way . The pheromone concentration and distribution reflects facts about the current problem the ants are working on.",
               "This insect behavior has inspired a new field of research, which is known as ant algorithms . An application of this algorithm is the ''ant system'' (AS) . The original AS was applied to the traveling salesman problem and inspired a range of applications and extensions like scheduling, vehicle routing, and routing in telecommunication networks. From this work the ''ant colony optimization'' meta-heuristic was derived . In ACO, algorithms are instances of this meta-heuristic, in which a colony of ants builds solutions concurrently, asynchronously, and incrementally . Another example is AntNet , an application of ACO algorithms for routing in telecommunication networks. In the ongoing work, ant colony optimization fits the framework well and is streamlining the software by applying it where appropriate. However, as stated earlier, the research discussed in this paper only shares the inspiration but not the goals of ACO research. Moreover, discussing ant colony optimization as a meta-heuristic is irrelevant for the research presented in this paper.",
               "In contrast to longer-established coordination mechanisms, stigmergy has some important advantages:",
               "It is a lightweight mechanism in comparison to direct negotiation (implying a rendezvous) between agents. Direct negotiation operates in a manner analogous to people buying a house. Stigmergy is analogous to one person buying 1 kg of apples in a supermarket. The display of the apples and their price constitute the signs in the environment. The signs (pheromones) can have an information content determined by the designer. For instance, an ant may insert the smell of the food itself as part of the information, allowing other ants to prefer the trails that indicate the most suitable food source in the prevailing situation. In contrast, market-based coordination mechanisms reduce the dissipative field to a single dimension (i.e. money) (Parunak, AARIA ). Stigmergy is a system design/engineering approach that brings a much-enhanced separation of concerns and modularity. It brings a skeleton in which optimizing elements can be placed, but also other concerns can be addressed like feasibility, traceability, and so on. nest and food source. An important property of such pheromone trail is that it will evaporate if none of the ants deposes fresh pheromones. When an ant senses a pheromone trail, it will be urged by its instinct to follow this trail to the food source. Note that a scent strength gradient indicates the direction toward the food. When this ant arrives at the food source, it will return with food, while deposing more pheromones. In this manner, the strength of the pheromone trail is maintained and even reinforced. When the ant finds an exhausted food source, it starts a randomized search for a new food source and the trail disappears because of the evaporation.",
               "However, stigmergy has some potential disadvantages. First of all, decisions are taken without synchronization-apples are sold for a fixed price on a first-come-first-served basis. Therefore, direct negotiation probably is better suited for infrequent decisions with profound implications; stigmergy can nevertheless be used to guide such negotiations by providing useful decision-supporting information in the environment, on which negotiators can base their offers and bids such that more optimal contracts are made in less time and less iterations. Furthermore, in sign-based stigmergy, the signs reflect facts with some delay. Proper measures to cope with this property may be necessary.",
               "The research results, discussed in this paper, are based on the sign-based stigmergy of food foraging ants. Recall that sign-based stigmergy exhibits an interesting property: the signs that are locally available in the environment allow agents to learn about global properties of the system. Food foraging ants execute a simple procedure:",
               "In absence of any signs in the environment (consisting of scents from a pheromone), ants perform a randomized search for food. When an ant discovers a food source, it drops a smelling chemical substance, i.e. pheromone-on its way back to the nest while carrying some of the food. Thus, it creates a pheromone trail between",
               "The above scheme results in an emergent overall behavior for the colony that is highly ordered and very effective at foraging food. At the same time, it is robust against the uncertainty and complexity posed by the environment. An important capability of this type of stigmergy is that global information (i.e. where to find food in a remote location) is made available locally (i.e. in which direction must the ant move to get to this food).",
               "The main achievement is that individual ants are not exposed to the complexity and dynamics of the situation. The system copes with the complexity of the environment by incorporating the environment itself into the solution; no ant needs a mental map of the environment. Similarly, the evaporation and refreshing of the pheromone trails allows the ants to cope with the dynamics of the environment; there is no information in the head of the ants that must be kept in sync with reality. These attractive system-engineering characteristics prompted this research on ant-colonyinspired multi-agent manufacturing control. The remainder of this paper illustrates how the above mechanisms are translated in the setting of multi-agent manufacturing control. Note that it is important to apply the insights rather than to attempt to mimic nature's solution (In the beginning of the 20th century, people have built aircraft flapping their wings, rather unsuccessfully)."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 4,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "3.",
               "text": "Design of the multi-agent coordination and control system",
               "type": "introduction"
          },
          "paragraphs": [
               "This section first discusses the scope of the system, some aspects of the PROSA agents and the description of the development system's architecture. Next, it presents the architecture of the development system. The last part presents the three pheromone propagation layers: (1) the subnet capabilities layer; (2) the transportation times layer; (3) the load-propagating layer. The first two layers make information available about properties of the underlying system that change infrequently. The third layer provides the short-term forecasts that are used to optimize system performance. Finally, the section discusses how resource and order agents behave to obtain the desired manufacturing control. initialStepID nextStepID",
               "3."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 5,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "1.",
               "text": "Underlying systems",
               "type": "introduction"
          },
          "paragraphs": [
               "As stated earlier, the research prototype intentionally simplifies the industrial reality, except for the aspects that are the focus of the investigations. This section discusses the type of underlying manufacturing systems-controlled by the multi-agent systemthat are supported in the prototype."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 6,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "3.1.1.",
               "text": "Manufacturing plants",
               "type": "introduction"
          },
          "paragraphs": [
               "The research focuses on flexible production systems. To this end, the control system supports a flexible plant topology. This topology can be any (finite) directed acyclic graph in which the nodes are processing units and the edges correspond to transport units like conveyors (cf. ). The prototype is currently being enhanced to cope with cycles in a plant topology. Each processing unit performs one of the processing steps for a subset of the product types supported in the plant. Orders are able to skip processing units, even when other orders are queuing in front of it (the system is able to prevent those waiting orders from blocking the transport system). shows how a simple underlying plant may look like."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 7,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "3.1.2.",
               "text": "Process plans",
               "type": "introduction"
          },
          "paragraphs": [
               "A process plan defines in detail the processing steps that transform the raw material into the desired final product . The current prototype only supports a fixed deterministic sequence of steps for the process plans of the product types. In reality, multiple sequences can be possible. Moreover, the sequence often depends on test results (e.g. indicating the need for a repair operation). Prototype enhancements to handle this are part of ongoing developments. shows a sample representation of a process plan for a product. It consists of a two-column table, where first column corresponds to the initial operation (referred to as the stepID) and second column corresponds to the next operation (referred to the as nextStepID). The state of an order is fully defined by the identifier of its most recently executed processing step. In addition, the processing steps are defined such that only a single step per visit to a processing station is performed.",
               "Furthermore, an underlying system consists of an arrival station, a number of processing units and an exit station. The system simultaneously produces a mix of product types, where each type has a unique product identifier. Each order, which has a unique order identifier, consists of one product instance comprising a single piece of material moving through the plant. "
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 8,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "3.2.",
               "text": "Agents and the environment's architecture",
               "type": "introduction"
          },
          "paragraphs": [
               "As stated in Section 2, the multi-agent system comprises product, resource and order agents . The system has no staff agents, which are optional in the PROSA reference architecture. In this design, a product agent corresponds to an agent that has all the know-how of products that can be produced on the shop floor. A resource agent corresponds either to a processing unit or a transport unit. Each order agent corresponds to a single order that was ordered by customer.",
               "This research is based on the sign-based stigmergy of food foraging ants to integrate the shop floor control system. In this design, pheromones are used as communication mediator. A pheromone is a chemical substance that is dropped by animal species in the environment as guidance for their follower. Since those agents are not able to perform a direct communication, agents need to lay down pheromones in the environment to let other agents interpret, and take them into consideration during decision-making. In order to spread pheromones, physical agents (product, resource and order agents) create ant agents, which are part of the overall aggregated agent. These ants travel virtually across the plant topology to retrieve and disseminate information analogous to the food foraging ants from an ant colony. In order to accommodate this behavior, in the development of the system, these biological concepts should be mapped into software to make these concepts useable in control applications. The development of the systems imposes specific demands regarding software architecture, stigmergic coordination and decision-making, and development process of the systems. The architecture implementation has to support the interaction, execution, and decision-making of ''ant-like'' mechanism to enable a ''stigmergic management'' of a production process. There are three concepts that must be reflected within the architecture: system and to maintain pheromone information within the control system. If artificial ant agents should roam a production environment (with resources, crossings, and transport facilities) to depose artificial pheromones as a routing advice within the transport system, the whole structure of the production system must be strictly resembled in software. The environment therefore has to provide following architectural concepts:",
               "1. ''Locations'', where agents can reside and retrieve or contribute information (sense, create, or maintain pheromone objects). 2. A management mechanism for storing and maintaining artificial pheromone objects at these locations. 3. A propagation mechanism to allow the agents the movement within such a topology of locations for the purpose of deposing or sensing information (e.g. dropping pheromone objects at a specific location and building trails during the agent's traveling through the environment).",
               "1. An artificial ant agent as the acting individual.",
               "2. An artificial pheromone as the information carrier. 3. A distributed pheromone propagation infrastructure to create the artificial dissipation field.",
               "To implement this system, a typical environment should be built in order to provide mechanisms for artificial ants to move through the distributed control",
               "The environment in which the control system's pheromone propagates is modeled as a separate network of local pheromone locations in parallel over the physical transport network (connected network of all resources). This pheromone location network can be interpreted as a distributed blackboard consisting of connected separate local blackboards. A local pheromone location is connected to each resource body and to each input and output port of the resource. In each local pheromone location, pheromones can be stored. A stored pheromone is only accessible/observable via the local pheromone location in which it was stored. Within this construction, all decision-taking agents have access to the pheromone location. Pheromones and ant agents are created by topological agents (order, resource, product, . . .). Based on its function and job description, artificial ant agents have a specified propagation direction. They can move ''upstream'' or ''downstream'' through the network and carry a pheromone with them in this direction. In this design, ant agents from product and resource agents move upstream and ant agents from order agents, which follow the movement of physical products, move downstream.",
               "The following sections describe how ant colony mechanisms provide the coordination and control of the manufacturing system."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 9,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "3.3.",
               "text": "The subnet capability layer",
               "type": "introduction"
          },
          "paragraphs": [
               "Subnet capability information is represented as trituple (p, s, d) , where",
               "Order agents ensure that their product instance, which is manufactured as it travels through the factory, selects a route that visits the required processing step implementations in a proper sequence. To this ends, every exit of every routing device contains, on its local blackboard, subnet capability information that enables an order agent to decide which exits are feasible options. The product agents send artificial ants upstream that retrieve this subnet capability information and put it on the local blackboards. This subnet capability information is refreshed regularly to account for changes in the system like a resource breakdown.",
               "A general idea of subnet capability can be seen in . shows an example of manufacturing system with three resources and two crossings that connected with conveyors. Each resource has different processing abilities. This ability has to be communicated upstream, and made available at the upstream resources. Thus, an order can decide along which routes it may continue in order to have all its processing steps processed completely. As can be seen in , the route from the upper path of crossing X1 only leads to resource(s) with abilities C1, C2, where the other path on the same crossing leads to resource(s) with abilities C2, C3, C4, and C5. This information is put at the local blackboard attached to the exit of the resource. p is the product identifier (corresponding to a product type, not a product instance), s is the step identifier (corresponding to the required state of the semi-finished product instance entering the subnet), d is the destination resource identifier for the next processing step.",
               "The product identifier tells that the corresponding product can be finished over a route starting with the exit. The step identifier indicates the next process step required from the order by the subnet behind the exit; it identifies the state in which the product instance must be. The destination resource identifier indicates the resource that has the capability to perform the next process step. When an order selects an exit on a routing device, the attached subnet capability information expresses whether the chosen subnet leads to a finished product, given the current state of the not-yetfinished product instance.",
               "In this paragraph, an example is used to explain the information propagation mechanism. presents the process plan for a sample product 1 (P1). As stated earlier, this research prototype intentionally simplifies industrial reality concerning process plans. For product P1, the sequence of processing steps is 1-3-5-6. Resource capability information is placed on the local blackboard of every resource. shows the configuration in the example. The topology of the system is represented by the graph {(R1, R2) (R2, R3) (R3, R4) (R3, R5) ? ? ? (R7, R9) (R8, R9)}.",
               "The product agent initiates the propagation of subnet information (p, s, d), where this agent creates an artificial ant and sends it upstream to retrieve and depose the subnet capability information. Recall that the product agent will do this regularly to cope with changes in the underlying manufacturing system. The propagation performs the following steps:",
               "1. Propagation always starts from the last resource (EXIT station), where typically shipment and/or storage occur. 2. The product agent creates an ant agent and provides it with the initial subnet capability information pheromone. This pheromone contains information about the last subnet available in the system, i.e. the subnet that informs that there are no more steps to be done for this product. The pheromone information is: (productID, 1, 1). 3. The product agent ant will clone itself as many times as needed to send one copy upstream through every entry of the current resource to the resource(s) that has the capability to process its last processing step(s). In our example, operation 6 is the last step for product P1, and the resources are R7 and R8. 4. When the ant agent arrives at a certain resource, it puts the initial subnet capability pheromone at the blackboard of the resource exit through which it arrives (cf. ). 5. The ant transforms its pheromone information into (productID, lastStepID, currentResourceID). 6. The ant clones itself as many times as needed to send one copy upstream through every entry of the current resource. shows the sample propagation of new pheromone information upstream from R7. 7. Upon arrival, the ant checks whether the pheromone carried by the ant already exists on the blackboard of the exit of current resource. If so, stops the propagation. 8. The ant retrieves the (set of) previous step(s) relative to the current processing step from the process plan. For each previous step, the original ant checks (cf. ): IF (current resource has the capability to execute the previous step) THEN  "
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 10,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "3.4.",
               "text": "The transportation time layer",
               "type": "introduction"
          },
          "paragraphs": [
               "At regular intervals, each resource agent creates an ant agent, and this ant agent propagates transportation time pheromone through the whole upstream network. The algorithm for laying this pheromone information comprises the following steps:",
               "1. Each ant, created at a resource in the manufacturing system except for the arrival resource, retrieves the local processing capabilities.",
               "2. For each capability, the ant constructs a pheromone. The pheromone format is: (productID, stepID, currentResourceID, initial transport time); the initial transportation time is set to zero. The ant adds the pheromone information to the set of pheromones that it will carry upstream. 3. The ant agent clones itself as much as necessary and ensures that exactly one ant travels upstream through every entry into the resource (see ). 4. Upon arrival at a resource during its upstream journey, the ant updates the pheromone information by modifying the transportation time to the time needed to travel between the present resource and the resource from which this ant originates. To this end, the ant retrieves travel time information   from the resource agents encountered during its journey. 5. The ant checks whether the destination resource already has the same pheromone information. If not, place the pheromones. Else, replace only if the new transportation time is shorter than the existing one. 6. The ant continues from step 3, except when its current resource is the arrival resource or when it failed to place pheromones.",
               "In this manner, the ants make transportation times to reach a given resource available at every resource exit from which this given resource can be reached."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 11,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "3.5.",
               "text": "The schedule list layer",
               "type": "introduction"
          },
          "paragraphs": [
               "The resource agents also create ants to propagate their current schedule list upstream, again at regular intervals. A schedule list represents ongoing and planned production steps on the respective resource. Each resource agent maintains its schedule list based on the information that is communicated to it by the order agents that propagate their intentions downstream (see further). The schedule list propagation comprises the following steps: list contains seven-tuples with the following format: (resourceID, orderID, productID, stepID, startingTime, duration, lastUpdateTime). Schedule list elements represent slots reserved on the corresponding resource. For example, a schedule as seen in is represented as Sch R5 ? f?R5; O1; P1; S3; 55; 37; 15?; ?R5; O2; P2; S4; 101; 44; 16?g. The pheromone information, which the ant will carry, is this schedule list of the resource on which it is created. 2. The ant agent clones itself as much as needed and exactly one ant propagates upstream through each entry of the current resource. 3. Upon arrival at the destination resource, the ant places the pheromone on the blackboard attached to the exit through which it arrives (see ). 4. Propagation of the schedule list will stop when ant arrives at the arrival station (R1).",
               "The order agents and their ants observe this schedule list pheromone when searching for a resource to execute the next processing step. shows the pheromone information that is available at the exit of a given resource x.",
               "3.6. The resource agent  discussed above, each resource agent has a number of blackboards attached, to entries, exits, and to the resource itself, on which (ants) agents write and read information. This information evaporates over time, allowing the system to forget information that may no longer be valid. The regular refresh by ant agents makes sure that valid information remains available.",
               "In addition, a resource agent has local responsibilities. The main task is to keep its schedule list up-todate. This schedule list requires maintenance whenever an order agent ant arrives and reserves a slot on the resource or changes the reservation that the order already holds. Likewise, the arrival of a physical order triggers schedule list maintenance because of the difference between slot reservation and the actual end of processing. Each update triggers the creation of an ant agent to propagate the new schedule list upstream.",
               "When an ant agent, originating from an order agent, signs in at a resource, it is carrying the following type of information: (orderID, productID, stepID, resourceID, startingTime, planDurationTime). This information represents an intention on behalf of the order agent to visit the resource. When receiving this information, the resource agent executes the following rule:",
               "IF (the schedule is already exist in resource's schedule list) THEN { Resource agent updates the information. } . Propagation of the schedule list and gap list of R4 upstream. order ant agents remove reservations if the order's intentions change, but robustness requires that there is a safety net that guarantees system integrity (e.g. keep working when an order agent implementation is incomplete, an order agent fails and disappears entirely, or when an order agent's ants can no longer reach the resource because of a broken link).",
               "When a resource goes down, the resource agent triggers a refresh to make the new situation knows as soon as possible. If the resource agent is unable to do this, the regular refresh achieves an equivalent results with some small delay. Transportation times will reflect the new situation as appropriate. When a processing resource goes down, its capabilities are taken off-line and the refresh of the subnet capabilities layer will inform the order agents that certain routes are no longer feasible. Also, all schedule list items that have a starting time later then the down time, are deleted. As soon as the resource is up, it triggers a refresh such that product agent ants and resource agent ants inform the order agents and their ants of the new opportunities. When a physical order signs in at a resource, the resource agent calculates the actual operation time, which can be different from the estimated one. The resource agent then updates the operation time of the order in the schedule list and triggers its upstream propagation."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 12,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "3.7.",
               "text": "The order agent ant and its Intentions",
               "type": "introduction"
          },
          "paragraphs": [
               "Furthermore, the resource agent makes sure that its schedule list information, even when it remains unchanged is propagated at regular intervals. Conversely, information in its own schedule list that is not refreshed by order agent ants evaporates. Each time when the resource agent updates its schedule list, it compares the timestamp of a list item with the updatetimestamp, and removes out-dated slots. In principle, Each order agent creates ant agents that explore the way ahead and find an attractive route. As soon as it appears at the arrival station, an order agent starts releasing a new ant agent at a given frequency to find out the resource to process its first step and the remaining steps. Similarly, when arriving at its current destination (i.e. a resource that will execute the next processing step), the physical order agent continuously sends ants downstream. The creation and propagation of these order ants stops when the physical order commences the execution of its last step."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 13,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "3.8.",
               "text": "Order agent ant rules to find the most attractive path",
               "type": "introduction"
          },
          "paragraphs": [
               "An order agent ant, situated at the exit of its current resource, carries the following information: (orderID, productID, currentStepID, and completion time at current resource). With this information, the order agent's ant follows the steps below to find an attractive path to be finished:",
               "Step 1: Get the currentStepID and find its nextStepID.",
               "Step 2: Find in subnet capability, the list of resources that are able to process its next step.",
               "Step 3: For each resource that has the capability of its next step, execute from Step 4 onward.",
               "Step 4: When order agent ant has found a resource to reserve, the ant checks whether it has already reserved a slot in this resource before. IF (order agent ant has not yet reserved the resource) THEN { Calculate the possible start time at the selected resource. This start time depends on its current step's finishing time, transportation time and possible start time at the selected resource. } ELSE {",
               "Order agent ant has to do a validity check: { IF (current step's finishing time is different from estimated) THEN { Adjust the start time (see ). } IF (finishing time of the preceding order at destination resource is different from estimated) THEN { Adjust the start time (see ). } } }"
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 14,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "text": "R3",
               "type": "introduction"
          },
          "paragraphs": [
               "O1, P1, S3 t real finishing time . The validity-checking rule 2.",
               "adding up the possible start time and the estimated operation time at selected resource.",
               "Step 6: Choose the resource that offers the earliest finishing time, and form the pheromone that represents the schedule related information (orderID, productID, stepID, destinationResourceID, starting time, and estimated operation time).",
               "Step 7: Place (or replace) the pheromone at the output of current resource that informs the physical order agent about its next destination resource. The pheromone content is (orderID, productID, nextStepID, destinationResourceID).",
               "Step 8: Go to the selected resource, and make a reservation."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 15,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "3.9.",
               "text": "The movement of a physical order agent",
               "type": "introduction"
          },
          "paragraphs": [
               "Step 5: Calculate the estimated finishing time on the selected destination resource. Calculate this, by",
               "As soon as the physical order agent finished its process on the current resource, physical order agent reads the pheromone left by the ant. By this pheromone (orderID, productID, nextStepID, destinationResourceID), the physical order agent knows its next step and destination, and travels immediately to the destination resource. "
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 16,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "text": "O1, P1,S3",
               "type": "introduction"
          },
          "paragraphs": [
               "A demonstrator has been developed to test the above algorithms. This multi-agent coordination and control demonstrator operates within a simulation environment. More specifically, the agents interface t est. finishing time real finishing time with an emulation of the underlying reality (equipment, etc.). In principle, these agents can be connected to a real physical production system by means of a suitable set of device drivers.",
               "The demonstrator software allows the user to specify a factory topology, the product recipes, the order book, disturbances, etc. The software generates the required emulation and control entities automatically in the proper configuration. This makes the software a flexible tool to develop and perform experiments, which is not restricted to a single case. The current version has some restrictions. For instance, the topology must not include loops, since some of the required functionality is missing (e.g. measures to avoid infinite looping when propagating information like the subnet capabilities). Solutions to handle loops are known to the developers and will be implemented in future prototypes. The development of multi-agent coordination and control system involved the following steps:"
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 17,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "4.1.",
               "text": "Manufacturing plant topology and testing data",
               "type": "introduction"
          },
          "paragraphs": [
               "A sample manufacturing plant, shown in , serves to test the demonstrator and its embedded control concepts. shows the image on the computer screen generated by the software. This sample system consists of: the arrival station (R1); the exit station (R13); 11 processing resources (R2-R12); the connections between these resources with their type."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 18,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "1.",
               "text": "The development of a model in which to",
               "type": "modelling"
          },
          "paragraphs": [
               "automatically generate the factory topology, and the implementation of a parser creating a suitable data/object structure from the user specifications. 2. The development of the multi-agent coordination and control concept, according to our needs and aim, and the implementation of this concept.",
               "Resources in system are connected with conveyors. Resources are placed at the side of a conveyor (cf. . A part loader, collocated with each resource, takes care of the part handling between the conveyor and a machine. Parts on a machine do not block the conveyor. also shows the processing capabilities of each resource.",
               "In the tests, the sample manufacturing plant supports two product types: P1 and P2. Their process plans are as follows:",
               "1. P1: {1, 3, 5, 6}, meaning that the 1st step of the process plan is operation 1, 2nd step is operation 3, 3rd step is operation 5, and last step is operation 6. 2. P2: {2, 4, 6}, which means that the 1st step of the process plan is operation 2, 2nd step is operation 4 and last step is operation 6.",
               "Some facts regarding the manufacturing plant topology and the products:",
               "1. Orders that are instantiations of product type 1 (P1) arrive with an inter-arrival time following the exponential distribution with a mean value (b) equal to 50 time units. 2. Orders that are instantiations of product type 2 (P2) arrive with an inter-arrival time following the exponential distribution with a mean value (b) equal to 150 time units. 3. OrderID for product type 1 is begin with prefix ''17856840''. 4. OrderID for product type 2 is begin with prefix ''49231780''. 5. In time interval that follow exponential distribution with mean value (b) equal to 90 time units, one machine will randomly selected to be down in the shop floor. In this prototype downtime will end after 100 time units.",
               "6. Transportation time per segment (resource to resource) is 20 time units. 7. Orders arriving in the system first enter the arrival station, and are delayed for 60 time units to allow preparatory actions to take place. 8. Arrival station R1 has unlimited capacity. 9. No loops exist in the plant topology. 10. Product-related information is described in . 11. The process plan of each product type (planID) is described in . 12. The manufacturing layout generated by the program can be seen in . 13. Every instantiated order carries information that its current step is 0, and currentResourceID is R. Collect experience and gather information to support the future development of more sophisticated and better-performing prototypes. 14. In the implementation, a resourceID is not represented as ''R1'' as always mentioned, but only ''1'', the same rules applied to productID.",
               "As stated earlier, the research intentionally stayed clear of real-life cases that are too complex to allow understanding what is happening in the system; it's the intention to build a series of prototypes, adding new functionality gradually until such real-life situations are handled in a controllable manner.",
               "To illustrate the results obtained with the current prototype, the results of the following test scenario will be used: five orders for product P1 arrive in the system while downtime happens during the test run. The discussion of simulation run result addresses the following points:"
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 19,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "4.2.",
               "text": "Testing: description and results",
               "type": "modelling"
          },
          "paragraphs": [
               "On the demonstrator, a suite of tests has been performed, starting with the simplest possible scenario (1 order only) toward more complex scenarios. The purpose of these tests was three-fold:",
               "Verify whether intention-based forecasting works in simple cases. Understand what is happening in the system.",
               "1. Each order arriving in the system sends an ant to find the most attractive path to be finished. 2. This orders' behavior shows that the proposed approach is sensitive enough to handle changes in environment. 3. shows the intention propagation of the order agent ant for order 178568401. 4. shows the intention propagation of the order agent ant for order 178568402. 5. shows the intention propagation of the order agent ant for order 178568403. "
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 20,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "8",
               "text": "5 3 6 3 9 1 1 3 1 2 1 4 3 1 5 1 7 3 1 2 0 3 2 1 2 3 3 2 4 2 6 3 2 7 2 9 3 3 0 3 2 3 3 3 3 5 3 3 6 3 3 3 9 4 1 3",
               "type": "modelling"
          },
          "paragraphs": [
               "Time . Intentions made by the order agent ant 178568402 for test case 3.",
               "6. shows the intention propagation of the order agent ant for order 178568404. 7. shows the intention propagation of the order agent ant for order 178568405. 8. An example of how an ant changes its intention and finds the better route, when the environment changes, is shown in . Initially, order 178568404 schedules its 3rd step at resource R6 (at time t 1 ? 167:49), but then it changes, and schedules it at R9 (at time t 2 ? 175:49), because R9 gives better solution for the finishing time.",
               "9. This test shows how the ant actually makes quick changes based on the information laid on the environment. 10. A change of intentions happens again at time t 3 ? 277:49. The ant changes the intention of processing its 3rd step to R6. 11. The same thing happens to order 178568405; there are two intention changes during the processing of order 178568405.",
               "For orderID 178568401, it can be seen that there are no intention changes, because along the way the ant  did not find the better solution than the existing intention. The real path followed by the physical order is: R1-R2-R3-R8-R12. The same applies to orderID 178568401; the intention made by the order agent ant of ID 178568402 (see ) and ID 178568403 (see ) coincides with the real path followed by the physical order agent. The intention of 178568402 is R1-R2-R4-R6-R12, and the reality is R1-R2-R4-R6-R12. The intention of 178568403 is R1-R2-R3-R8-R12, and the reality is the same. Note that, although these orders have the same product type, their ant scheduled them to be processed in different resources. shows that there are two intention changes by the order agent antID 178568404. The initial intention is R1-R2-R4-R6-R12. At time t 1 ? 171:49, orderID 178568404 is being processed its step 1, and the processing time is longer than the estimated. Re-calculation is done to update the possible start time for the remaining steps. After the calculation on its possible start time and after a check of the new possible start time and estimated processing time at R6, the ant finds out that the finished time of its 3rd step at R6 is not interesting anymore (t f6 ? 536:242), and the ant switches to R9, which now offers the earliest finished time (t f9 ? 533:475). "
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 21,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "9",
               "text": "1 2 0 6 2 2 1 2 3 6 2 5 1 2 6 6 2 8 1 2 6 3 1 1 3 2 6 3 4 1 3 5 6 3 7 1 3 8 6 4 0 1 4 1 6 4 3 1 4 4 6 4 6 1 4 7 6 4 1 5 0 6 5 2 1 5 3 6",
               "type": "modelling"
          },
          "paragraphs": [
               "Time . Intentions made by the order agent ant 178568405 for test case 3.",
               "The second intention changes again at time t 2 ? 277:493. At the time, orderID 178568404 is being processed its step 2 (operation 3), and the processing time is shorter than the expected one. Therefore, after re-calculation of its possible starting time, and observing also the offers from resources that can process its step 3, the ant finds out that R6 offers the best solution. Therefore, the ant changes the intention to R6 (finishing time in R6 becomes t f6 ? 521:005). The offers from R9 becomes unattractive (finishing time in R9: t f9 ? 531:005). In the end, this intention corresponds to order behavior in reality (R1-R2-R4-R6-R12).",
               "Order 178568405 (see ) also makes two intention changes. The initial intention is R1-R2-R3-R6-R12. At time t 1 ? 226:07, when the ant makes a re-calculation, it finds out that the R8 offers earliest finishing time (because the order processed at R8 at that time consumes less time than expected), therefore the ant changes its intention for step 3 (operation 5) to R8 (finishing time at R8 is t f8 ? 551:195, and finishing time at R6 is t f6 ? 568:069.",
               "The second change of intention happens at time t 2 ? 287:069. At this time, orderID 178568405 starts to process its 2nd step, and takes a shorter time than expected. Therefore, the ant makes the adjustment on its possible start time for the remaining steps. After an evaluation of the offers for the next step, it finds out that R9 offers the possible earlier starting time and finishing time (t f9 ? 533:04), and this offer is better than the offer from R8 (t f8 ? 551:19). After the second change, the intention remains unchanged."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 22,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "5.",
               "text": "Discussion",
               "type": "modelling"
          },
          "paragraphs": [
               "The test shows how the system is flexible enough to react to disturbances and to adapt to changes in the system environment. This anticipation behavior mainly depends on how frequent the order agent ants observe the network. This frequency is an important tuning parameter in optimizing the behavior of the system. It acts as a balancing valve for system's react ability and utilization of computer resources. If the frequency is high, there is possibility that the new generation ant will overlap with the ant from previous generation, which automatically makes the observation of previous generation ant become useless. Moreover, the computer will have a heavier load than necessary. In contrast, if the frequency is low, the system will become obtuse, loses sense of reactivity to disturbances and changes.",
               "The forecasting based on intentions also functions adequately in these relatively simple cases. When a disturbance occurs, the intentions change and provide a solution that is better adapted to the new situation. The prototype has an optimizing behavior, minimizing flow times, but optimization issues per se are outside the scope of the research that is discussed in this manuscript.",
               "Concerning the scale-ability of this relatively simple prototype aimed at answering a specific research question, this scale-ability is excellent under the assumptions/simplifications made in this prototype. Unfortunately, the solutions do not remain efficient when some of the constraints are relaxed (e.g. loops in the transport system, more powerful formalisms to express the process plans). Solutions to these problems are known and many are being elaborated in ongoing research activities with more ambitious goals.",
               "Concerning tractability, the design of this system is focused more on reflecting reality rather than on the optimization issues. The challenge here is to build a design that reflects reality as suitable as possible for decision-making without losing efficiency (e.g. in systems with loops and a topology that can be any graph, this can be difficult; with a fully connected graph, i.e. job shop-it is easy). The ultimate scheduling of the production activities remains NP-hard and heuristic decision taking is unavoidable. The research however reveals that much of the preparatory software developments, which feed up-to-date state and forecast information to these decision-making software components, can be efficient and can avoid exposure that would limit their lifetime and reusability."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 23,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     },
     {
          "head": {
               "n": "6.",
               "text": "Conclusion",
               "type": "conclusion"
          },
          "paragraphs": [
               "The design, implementation and results from the prototype manufacturing control system that uses a stigmergic approach reveal that it is possible to generate and use short-term forecasts based on the intentions of the order agents in relatively simple systems. It also shows that it is possible to separate concerns in a manufacturing control system (feasibility separated from optimizing the operations), and it shows that it is possible to build a system in which individual agents have limited exposure, permitting them to operate in a wide range of situations and conditions. Moreover, the manufacturing control system adequately reacts to change and disturbances. The implementation of this coordination and control system detects where the congestions in the manufacturing plant are about to occur if the present intentions are executed. Knowing the possible maneuvers in the plant (alternative process plans and alternative routings), the agents select alternatives routings that offer appropriate solutions.",
               "Ongoing and future work will relax constraints in the current prototype (e.g. loops in the plant topology), addresses more complex manufacturing systems (modeling, operators, tools, set-ups, . . .), and addresses implementation aspects to enhance scalability and system performance. Finally, the set of optimization techniques and optimization criteria will be expanded.",
               "Dr. ir. Paul Valckenaers received the applied mathematics engineering degree in 1983, the computer science engineering degree in 1985, and the mechanical engineering PhD degree in 1993, all from the Katholieke Universiteit Leuven, Belgium. Since 1986, he is with the Mechanical Engineering Department, Division PMA, of the Katholieke Universiteit Leuven. His main research interests are in programming, scheduling and control of flexible production systems and design theory for the development of complex adaptive production systems. His current research activities are widening the focus toward multiagent coordination and control as a technology domain by itself.",
               "from Institute Technology of Bandung, Indonesia and master degree in engineering in 2001 from Katholieke Universiteit Leuven, Belgium. Currently, he is a candidate for the PhD degree in mechanical engineering from the K.U. Leuven. Since 2000, he is with the Mechanical Engineering Department, Division PMA, of the K.U. Leuven. His current research interests are in multi-agent coordination and control in manufacturing system.",
               "ir. Hadeli received the industrial engineering degree in 1998 from the Parahyangan Catholic University, Indonesia. He also obtained the master degree in industrial engineering and engineering management in 2000",
               "Dipl.Ing. Martin Kollingbaum received the degree of diplom ingenieur in computer science from the Vienna University of Technology in 1990. Since 1990, he worked as a software engineer in industry, and as a researcher at the Vienna University of Technology, at the University of South Carolina and at the University of Cambridge, UK. He is currently with the Department of Computing Science at the University of Aberdeen. His research interests include multi-agent systems with applications in manufacturing and e-commerce."
          ],
          "paper_id": "233bc260-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 24,
          "fromPaper": "Multi-agent coordination and control using stigmergy"
     }
]