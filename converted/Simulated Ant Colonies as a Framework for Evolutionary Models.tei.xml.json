[
     {
          "head": {
               "n": "0",
               "text": "abstract",
               "type": "abstract"
          },
          "paragraphs": [
               "Simulated ant colonies form a helpful example for multi-agent simulations, as their communication works based on indirect interaction. In this paper I describe a framework that was developed for the simulation of ant colonies, but can also be applied to other domains. Starting from the overall structure in the multi-agent model, followed by a description of primitive framework components, activities and roles are introduced as means for structuring behavior description. The result is a framework for explicitly representing ant-like multi-agent models that scales also for more detailed model. A model represented using this framework can be interpreted for simulation. A complete environment for modeling and experimenting was build around it. The application domain was mostly ant simulation, but also for models in other examples, the framework was successfully applied. Evolutionary models and Multi-Agent Simulation Analyzing emergent phenomena and patterns requires the modeling and simulation of multi agent systems. Emergent phenomena are characterized by locally interacting entities that produce a pattern or behavior observable on a global scale that is not directly deducible from local behavior [1]; shortly stated: \"the whole is more than the sum of its parts\". Ant colonies are a good example for such systems. Although the local behavior of a single ant does not seem to be controlled centrally, nor any explicit coordination between ants is observable, the superorganism \"ant colony\" is able to construct complex nest architectures or adapt its distribution of foragers to food sources in an efficient way. Emergent phenomena can in general be found in complex adaptive systems, where every entity adapts to its local perceptions and by its interaction triggers other entities also to adapt their behavior [2]. Evolutionary multi-agent models can reproduce complex adaptive systems. A multi-agent model is a simulated multi-agent system that exists in a simulated environment [3]. It is a natural form of modeling, especially for societies, as active entities in the original are also interpreted as active in the model. That means that systems, which can be observed as multi agent systems in the original, are also conceived as multi agent systems in the model. Evolutionary multi-agent models additionally capture some process of development in the agent system, not necessarily but mostly with the help of genetic operators, thus reproducing natural evolution. However, also simulation of individually learning agents may belong to that class of evolutionary models. The modeler has to control both, multi-agent system-behavior and development-and environment. The latter is especially important in evolutionary models as it determines the direction of the adaptation. Multi-agent simulation is an appropriate method, when in-homogeneities in space or in the individuals are important. Thus it is especially useful for social simulation incorporating mental models into the single actors. But these models are not only costly, but also difficult to design, due to the normally complex form of interactions. However, the example of ant colonies shows up to be sufficient and practicable for many application areas, although every agent has very simple structure."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 0,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "Simulated Ant Colonies as an Example",
               "type": "abstract"
          },
          "paragraphs": [
               "Simulated ant colonies are a good example for multi-agent models. Their supposed form of communication is indirect interaction, or \"stigmercy\" . That means, that one agent that perceives the configuration of its surroundings and its internal state, changes its environment e.g. by depositing some pheromone trail. Other agents perceive the same environment including the trail and react on it, e.g. by following it. Thus in an ant model there is no need to incorporate complex direct interaction protocols. Stigmercy interaction is simple, but has important properties: There are no hard-wired channels of interaction. Thus the agent behavior must be flexible and adaptive. However, it can be formulated rather independently from the behavior of the other agents. It is just depending on the perceived environmental configuration. The main drawback is that the agent behavior must be synchronized indirectly. The local behavior that should result in the global phenomenon under examination is modeled without formulating direct interactions, but based on some sequence of environmental manipulations. The possibility to focus on single agent behavior is useful for formulating evolutionary models: as the individuals with such behavior models are due to selection, interaction protocol with direct messaging would be more sophisticated to deal with."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 1,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "Frameworks for Multi-Agent Models",
               "type": "modelling"
          },
          "paragraphs": [
               "Even without an explicitly incorporating mechanism for evolutionary adaptation, the design and implementation of a multi-agent simulation is not trivial. The concept model is easily accessible, as active components in the system -i.e. the agents -are also active components in the model. But having to deal with concurrency or synchronized behavior is not as easy as it seems at first sight. Thus support by appropriate development environments is necessary.",
               "We developed a framework especially for ant-colony-like multi-agent models. Our goal was to support domain experts to an extent, that they are able to formalize their models themselves. There are already lots of frameworks, tools, and languages for multi agent simulation. Approaches range from schemata and systems originating in the simulation area to languages for modeling multi-agent systems developed in Distributed Artificial Intelligence.",
               "Multi-agent simulation can be seen as an enhancement of standard individual oriented simulation. Agents can be taken as equipped with more sophisticated behavior and enabled with methods of adaptation, in comparison to the individuals in process-oriented models or cellular automatons . In analogy to viewing agent-oriented systems as a more abstract form of object-oriented systems, multi-agent simulation can be related to object-oriented simulation . In the last years a variety of multi-agent simulation languages, e.g. Swarm , agent architectures for simulated agents like PECS (\"Physis, Emotion, Cognition, Social Status\") or specification frameworks like AgedDEVS (\"agent-oriented DEVS\") were developed. However, all of them require direct programming, as they do not provide an explicit model representation. On the other hand, there are declarative languages and schemata for describing multi-agent system based on parallel rule interpreters, like SDML (\"Strictly Declarative Modelling Language\") or special forms of logical representation, like ConcurrentMetateM . These frameworks provide a completely declarative, rule-based modeling framework, but support for simulation application does almost not exist. Rule-based representations are especially apt for describing behavior. However, these frameworks possess almost no means for structuring the rule sets. Thus one can suppose that modeling more complex models is a rather hard task.",
               "Summing up, we can identify two major drawbacks in existing frameworks for ant-colony-like multi-agent models: Totally explicit modeling languages have a scalability problem. Although rules provide procedural semantics, but declarative representation , grounding of truth-values of checks and action effects is problematic. This is due to the fact that a complete declarative representation leads to large rule sets, as also all basic principles have to be formalized. On the other hand, a huge amount of class libraries, simulation languages base on non-declarative model representation. The model is coded in a programming language without separating the model from simulator or experimental control. Due to the a priori higher level of abstraction that becomes possible using an explicit, i.e. declarative form of representation, this separation has many advantages . One of them is the possibility to provide additional specialized tools for a concrete representational scheme. Examples are appropriate graphical user interfaces for modeling and experimenting.",
               "The second drawback is directly connected to that large rule sets. In general, large unstructured rule sets have proven as impracticable for large knowledge-based systems . As we want to develop more detailed models for individual agents, the resulting disadvantages can be transferred to the description of agent behavior. -Lack of clarity in un-structured rule sets: Editing a large rule set becomes rather expensive not only because navigation takes a lot of time. Similar rules, conflicting rules, etc have to be found and eliminated or modified. -Costly formulating of rule conditions or conflict resolution? The consequence is, that either one accepts the effort maintaining a rule base or transfers the problem of similar or conflicting rule to the conflict resolution. Then the interpreter selects all rules which's condition is true and the conflict resolution hast to cope with more than one rule firing. -Difficult generation of coherent behavior: This is a consequence from the first point. If there are many rules with similar condition, but different action, the situation changes slightly, but a different action is selected. When the modeler looses his overview over the rule set, the generate behavior become somewhat chaotic.",
               "Bad scaling at the rule selection is a consequence of the number of rules that has to be tested in every time-step.",
               "The solution to these problem lies in structuring the rule base in a way that the rules which are relevant at the current point of time and fast accessible. This is done best by grouping the rules in a model-specific way. Then the organization of the rules is clear from a modeling point of view, but can also be used for efficiently interpret the rule set for simulation.",
               "In the following section an approach to a multi-agent model framework is proposed, that grounds on two ideas -using a semi-declarative representation and structuring the behavior description for transparent and effective modeling and interpretation. Although this framework was particularly developed for supporting extensive ant simulation it is apt for evolutionary multi-agent simulation in general."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 2,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "SeSAm: Shell for Simulated Multi-Agent Systems",
               "type": "modelling"
          },
          "paragraphs": [
               "General structure of the multi-agent model A simulated multi-agent system not only consists of active entities -the agents -, but also of passive entities and at least one reference system, i.e. a map, where all objects are positioned. Based on this position locality is defined. In our framework the modeler has to be explicitly identify these according to their type. These domain depending classes are integrated by traditional heritage methods and additional description objects. The latter saves meta-information, from initial configuration of the agents' internal state, to class documentation. Maps are two-dimensional gridmaps that can be combined by \"transition points\", e.g. for modeling a surface-map together with an anthill map, connected via the nest-entrance. depicts an example for these structures, whereas figure 2 shows a survey of the technical organization of the classes. The body of an agent -its internal registers and attributes filled with its goals, desires or beliefs -is represented by a set of state variables, parameters or constants. These are not mere attributes, but instances of templates described and assigned explicitly to the classes or to the single instances. There are some predefined templates, like the position of the agent or its graphical representation. These must be given a priori, as the interpreter and the simulator rely on their existence. As depicted in , not only agents possess this kind of body-definition, but also passive resources and reference systems. Based on body and additional events (activity-like behavior of the reference system) complex environmental model for the multi-agent system can be produced.",
               "In addition to this body definition a special focus was set on the behavior description of the agents, this is described in the next sections proceeding from the atomic elements -the primitives -to the description metaphors based on the structuring facilities."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 3,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "Semi-declarative representation of primitives",
               "type": "modelling"
          },
          "paragraphs": [
               "The usability of every representation scheme is strongly connected to its basic primitives. The level of detail that is expressible in a model is based on the abstraction level of these representational atoms. In a rule-based behavior description these atoms are on one side the basic symbols of perception that can be used for the situation description in the rule conditions and on the other the commands that form the rule actions. As described above, both traditional programming and totally declarative model representations have its drawbacks. The first involves too many technical aspects that make the modeling process unnecessarily complicated; the latter requires a huge part of the model for first principles thus scaling badly for more complex models. In SeSAm we wanted to steer a middle course -providing a set of predefined symbols which semantics are given by code in a programming language. That executable code is associated with that symbols. If the truth-value of a rule condition is tested then the symbols used for it re refined until the primitive predicates occur. The truth-value of these primitives is then tested by executing the given program code and returned. The connection between declarative, explicit representation and program code is managed by description objects that exist for every primitive symbol of the model. shows an example. To design a predefined set of these primitives is a sophisticated task. One has to satisfy two conflicting goals: maximum of user control and maximally high level of abstraction. The problem is the abstraction level is low; the primitives are more basic -just like MOVE-ONE-STEP or IS-OBJECT-ON-NEXT-POSITION? Using those primitives e.g. the formulation of goal-oriented movement becomes more costly, in comparison to the situation when being provided with primitives like MOVE-TOWARDS-POSITION. However, with high-level primitives the modeler looses the ability to completely control every detail of the behavior model and has to rely that the primitive he selects, really works as he expects it to do. Thus the semantics of the primitives must be transparent and function according to some intuitive notion. The semantics of a MOVE-command are relative easy to describe, however the concrete functioning of a predicate PERCEIVABLE depend on the way the local surroundings are tested for the searched kind of object Predefined primitives in general During many applications a set of basic model primitives emerged in SeSAm. This set of predefined primitives is domain independent and rather concrete, but it covers most aspects needed in multi-agent simulation. -Primitives that are related to the state variables, parameters and constants of agents and the other parts of the model configuration. They realize queries and manipulations of the internal registers or attributes of the model configuration. There are also primitives to change the graphical presentation and e.g. direction of an agent. -_ Primitives for dealing with space representation and spatial relations, e.g. primitives for movement, distance calculations, etc. -Primitives for tests of existence, for generating and deleting objects -agents and resources. -With the resource objects communication may be represented by generating, deleting special messageresources. This is expensive not only in computing time, but also memory consuming. Providing primitives for sending and interpreting symbolic and time-stamped messages, this can be avoided. Special primitives for broadcast-communication, for blackboard-based exchange and for direct communication are provided and can be used when needed. These communication primitives are not really necessary for ant-model due to the stigmercy interaction, but they are relevant in social simulation. -Numerical and non-numerical operators, e.g. for addition or string parsing. -Special meta-primitives, those apply other primitives on sets of registers, objects, etc. Important is also a possibility for conditioned primitive calls."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 4,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "Primitives for evolutionary models",
               "type": "modelling"
          },
          "paragraphs": [
               "Now the question arises, whether there is a special set of primitives for evolutionary models. Using the primitives listed above, a modeler can formulate behavior models for many different agents. For evolutionary models primitives for generating new objects, especially new agents with modified set of parameter, are important. Also primitives for deleting objects can be used for modeling selection: The agents not well adapted to the environmental requirements simply \"die\", when their energy level is too low to maintain further life. Beyond these primitives that enable the realization of variable structures special atoms for adaptive and learning behavior are provided: -Parameter adaptation can be realized by primitive actions. An agent manipulates the parameters that influence its behavior, e.g. parameters that represent its tendency to select a certain action or a factor that is used for updating a state variable. Simple learning behavior -like reinforcement style learning can be formulated ad hoc without any additional primitives.",
               "Especially for models in the area of artificial life the set of primitives needs to be enhanced by the well-known genetic operators, like crossover or mutation working on gen-strings . Selection, reproduction and survival of the fittest -the other components of evolutionary learning in the biological sense can be reduced to the given primitives of communication, agent-generation and agentdeath. Crossover-and gen-string-mutation primitives were added for the second ant simulation application described later. -However, if a modeler needs to reproduce adaptive behavior that incorporates structural changes in the behavior description, then primitives that just operate on the current model configuration are not sufficient. The behavior representation is interpreted during the simulation and thus generates the behavior of the agents. Its explicitness makes a powerful type of primitives for manipulating the behavior model itself possible. The collection of these primitives forms a kind of meta-model -a part of the model that is interpreting and modifying the directly behavior generating part. Using these meta-primitives an agent can consciously generate new rules or activities, modify existing ones or erase rules that it has evaluated to be sub-optimal. Applications for this kind of meta-primitives are learning by demonstration or other forms of supervised learning. However, this meta-model is also part of the model and thus must also be validated carefully. This is a problem that might restrict these kind of models to games or purely speculative models."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 5,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "Structured representation of a Multi-Agent Model",
               "type": "modelling"
          },
          "paragraphs": [
               "As described above agents are the active entities in the model. Thus the description of the dynamic parts of the model contains just the description of the agent behavior. It is based on rules. The structures that we imposed on that set of behavior-describing rules bases on two concepts, namely roles and activities: shows the concepts of these two forms of structures."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 6,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "Fig 4: Roles and Activities as patterns for structuring rules for behavior description",
               "type": "modelling"
          },
          "paragraphs": [
               "Roles are a tool for separating rules into sets that describe agent behavior rather independently of the other sets. Good examples for it are different developmental stages: a brood-agent just lies around and develops, whereas an adult animal can exhibit a lot of different activities. As roles can be changed (in contrast to the agent class, like \"ant\"), they can for example be used for modeling different castes in an ant colony. An inside-worker stores food or takes care of the brood, but if it perceives some energy deficit, it might turn into an outside-worker searching for new or exploiting known food sources.",
               "The concept of activity bases on the phases associated with agent behavior: An agent interprets in a first step his perceptions and updates his internal data according to this new information. The second phase consists of the selection of his next action according to his goals and internal state. The execution of the selected actions forms the third step, after that this cycle starts again . The second -the action selection -is the most complicated and expensive step. It is the phase that actually determines the behavior of the agent. Our approach aims at simplifying this central phase. It grounds on the observation that the selection of one action often directly determines what action might be selected in the next step -e.g. a homing ant moves and deposits a pheromone trail. There are actions that have to be formulated as happening concurrently and repeatedly until a certain situation is perceived. This construction we named \"activity\" -as a kind of \"dynamic state\": As long as an agent pursues a certain activity, it executes the actions associated with that activity. Thus the central phase of the agent program consists of the selection of an activity not just one action. There are a few additional enhancements to that activity-selection concept that are responsible for its particular useful-ness: -We combined expectation-driven perception with rule indexing: Instead of relating rules to the activities that they select, we associated a rule to the activity that it terminates. That means, that per default rules have an activity-test in their condition, for example: if I'm in the activity \"homingbehavior\" and I'm arriving at my anthill then select storing-behavior. The interpreter must just test the rules that terminate the activity the agent is executing. But -as not all rules can be assigned to terminate exactly one activity -there must be also a set of rules that are relevant in every case. Depending on the concrete model this set of \"emergency rules\" might be rather small. Based on his use of activities the modeler is able determine exactly, how many rule are tested in every time-step. Thus structuring the behavior to a high extend, rule sets are constructed that can be dealt with very effectively. -The modeler can assign further information to every activity, like constrains, invariants and explanations. This meta-information about the activity is represented for purposes of documentation, validation of calibration. -Not only actions are depending on each other, but also activities. Forms of inter-depending activities also should be made explicit by grouping them. Therefore we introduced abstract activities. Instead of containing a set of primitive actions they consist of a set of activities. This agenda can have the form of an activity sequence or alternatives. Combining these abstract activities hierarchically, an and-orgraph emerges. This is a skeletal-plan-like structure that is used for representing plan fragments in traditional AI expert systems .",
               "These enhancements to the framework of rule-based activity selection provide a powerful language for describing behavior. The third phase in the agent program -the action execution -consists of activity refinement according to the and-or-graph and action execution as before.",
               "Combining the activity concept with the role concept, the modeler is able to structure the behavior description in two dimensions: every role consists of a set of activities, thus the agent behavior is determined by its role and its activities. Changing its role it changes its abilities expressed in the set of activities that are possible in a certain role. This representational framework for agent behavior can be seen as generic agent architecture providing different metaphors for modeling. Examples are depicted in . The modeler himself decides what concrete form or metaphor is appropriate for his model and the agents that he is describing. Although ants are typically modeled as stimulus-response-systems, other forms of behavior description can be relevant for ant models. shows such a case for the foraging behavior or an ant.  "
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 7,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "Using this Representation Framework for Evolutionary Simulation Experiments",
               "type": "experiment"
          },
          "paragraphs": [
               "This explicit representation for the structure and behavior of a multi-agent model is interpreted for simulation experiments. The simulator acts round-based: For every time step all agents are updated according to the following agent program: First the current model configuration is interpreted and the perception for the agent is supplied as the modeler has specified it for this kind of agent. This date is stored in special variables in the internal attributes of the agent. Then the interpreter of the behavior description for the agent is triggered. After selecting the activity determined by the model, this activity is refined and the primitive actions are executed on the current model configuration. This is repeated for every agent in the system. After that, possible environmental events are executed. Before the next round of updating the agents is started, the order of agents is shuffled randomly. This is necessary for reducing possibly negative effects of this sequential update."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 8,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "Embedding into a modeling and experimentation environment",
               "type": "experiment"
          },
          "paragraphs": [
               "The interpreter executing this representation was integrated into a graphical modeling and simulation environment. We named the complete system SeSAm -\"Shell for Simulated Multi Agent Systems\". It is available free from the Internet on the site www.simsesam.de. shows its components: We already described the model representation, its interpreter and the simulator. Animation and trace file generation belong to the must-haves of every simulation system. In SeSAm we also provided a component for simple statistics -just to be comfortable for the first sight on the produced data. Data and statistics can be exported to standard text file format. For the process of implementing and testing a model a visual modeling component and facilities for direct manipulation during the simulation experiments are important. Based on the explicitly predefined structures for the representation of agent system structure and behavior, editors could be developed that follow concepts of visual programming. Thus even complex behavior descriptions can be formalized in a transparent and reasonable way. For further details on the system see ."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 9,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "Applications",
               "type": "experiment"
          },
          "paragraphs": [
               "As mentioned above, the framework for representing multi-agent simulation models was particularly developed for applications in behavioral biology concerning questions about ant colonies and other social insects. We started in 1996 with an ant model that was meant to reproduce the complete life cycle of an ant colony, from solitary foundation to colonization of a habitat with inter-colonial competition. Now in 2001, SeSAm is used for different, not only biological simulation. The paradigm developed for ant simulation turned out to be useful for microscopic traffic simulation, generating scenarios for psychological experiments, etc. In the following we want to shortly introduce two of the ant models and then sketch characteristics of general application domains."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 10,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "An Ant Models for combining different emergent phenomena",
               "type": "modelling"
          },
          "paragraphs": [
               "Between 1996 and 1998 we developed together with Ulrich Raub (Theodor-Boveri Institute at the BioCenter of the University of Wrzburg) an extensive ant model. We aimed at combining several emergent phenomena that can be observed in ant colonies. The model reproduces the behavior of ideal ant. However, for some aspects we had to commit to a concrete species. Then we choose myrmecocystes mimicus. This species is well known for it special inter-colony interaction in form of tournaments and its storage system that is based on specialized honeypot-ants . shows an overview over the different behavioral types. The edges indicate possible direct interactions between individual ants, but also with resources or other passive objects, like waste. The modeled ant colony consists of ants that belong to different castes or developmental stages, both groups of entities with specialized activities. These were represented by different roles that may be changed due to the age or the perceived energy situation. Every perception happens strictly locally: The energy situation is perceived during some random walk in the nest. When two ants meet, they balance their energy level. This activity is called trophallaxis. Thus, if the energy of an ant drops below a certain threshold, this is also a sign for a low over all energy level.",
               "Waste can be both, corpses of dead ants and earth-pieces that have to be digged out during nest-expansion. A special property of an ant is its affiliation to a certain colony. Ants from other colonies are seen as direct competitors for food sources and thus as enemies. The behaviors of the simulated ant colonies cover phenomena like solitary founding of a colony, generation of new ants via some brood stages, foraging with trail recruitment and regulation of forager numbers according to energy situation, reaction on enemies leading to \"tournaments\" and colonization of a habitat by generation of new founding queens. Thus we reproduced all phases in the life of a complete colony, not only in the life of a single ant.",
               "When combining these single phenomena into a complete model we learnt a lot about the balanced parameter calibration found in natural behavior regulation. We pursued our modeling goal iteratively. Every time we wanted to add a new phenomenon, the complete model had to be tuned again, or even redesigned. The single phenomena are highly inter-depending; e.g. foraging must cover the energy consumption of the brood. The consequence is that the number of brood agents actually regulated by the queens energy level interferes not only with the number of nest workers feeding it, but also with the number of foragers that are providing the overall energy supply.",
               "Thus the number of assumptions in this model was enormous. Thus such an extensive model can just be validated qualitatively. This leads to the fact that this model is not apt for concrete biological questions, but it proved that the framework scales for detailed and complex behavior models."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 11,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "Ant Model with Evolutionary Learning",
               "type": "modelling"
          },
          "paragraphs": [
               "Our most recent project in ant modeling uses evolutionary concepts for examining the learning process of ants that have to adapt to scarce resources by developing sociality. This model is currently developed based on the described framework together with Jrgen Liebig (Theodor-Boveri-Institute at the Bio-Center of the University of Wrzburg).",
               "The basic goal is not to explain sociality as a stable form of organization, but the process of its development. What environmental setup had to be at what stage of development that the superorganisms of an ant colony may emerge? That means, this model consists of two main parts -the model of the ant behavior and the model of evolutionary adaptation that takes place in the simulated environment, where the ants -solitary or not -have to reproduce and survive. Thus this environmental model is essential for the results of the evolutionary process and thus for the reliability and the success of the simulation itself Again we set up an abstract ant model that reproduces the behavior of an ideal proto-ant. This proto-ant possesses the abilities to hunt for preys, reproduce and take care of brood agents. Depending on the amount of energy that the ant manages to transfer to her brood, it produces ants of a more or less high quality. However, its quality (e.g. size) influences its success in executing tasks, like e.g. hunting. Therefore the ability to maintain its own colony depends on the amount of energy it gets during the larval stage. Every ant has two genetically evolving parameters: a tendency towards staying in the nest, where it was born and a tendency to reproduce. The individual values of each ant undergo the \"traditional\" genetic operators like crossover and mutation. Both factors combined with the described quality should express under what environmental setup a first generation of offsprings stays in its mother's nest in order to help at producing high quality animals. These then might have a good change to found new colonies.",
               "This describes the first model at the beginning of a three-year research program. We produced simulation results that indicate, that this hypothesis actually leads to overlapping generations with low-quality helping ants evolving in an environmental setup with scarce resources. On the other side this model produces a stable population without helping offsprings when there are enough resources. But for a more detailed publication of the model and its results it is too early. Further tests have to be made. But this short description already shows the potential of our framework."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 12,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "Transfer to other application domains",
               "type": "modelling"
          },
          "paragraphs": [
               "Although it was particularly designed for ant models, SeSAm can also be applied for other domains. We did this for microscopic traffic simulation , fire-fighting scenarios for psychological experiments, diverse other projects in simulation of social insects and the re-implementation of several models (for a survey see ). Based on these experiences we can list some properties for systems that can be appropriately modeled in the described framework: -There are clearly identifiable agents as active components in an environment. Spatial relation may be important, but most primitives can be applied regardless of positioning etc. -The agents should have clearly identifiable activities. The selection of an activity is depending on specifiable situations. There are also clear stereotypic behaviors. Thus the description metaphors and facilities for structuring can be applied. -The agents possess a non-trivial behavior repertoire. Thousands of very simple agents are programmed more effectively directly in an agent-oriented simulation language, e.g. like Swarm . Adaptive behavior is primarily attractive to model, as the complete behavior description above the primitive action level is explicitly accessible. -The agents should be not too complex. The focus of modeling should lie on the agents' behavior and interaction, not on their internal planning or scheduling abilities. Tools for the agent-oriented software development, e.g. ZEUS provide such components. -The description of the agent system and the environment in that the agent system is positioned, are both important."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 13,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     },
     {
          "head": {
               "text": "Conclusion and Further work",
               "type": "conclusion"
          },
          "paragraphs": [
               "Taking ant colonies with their sub-cognitive behavior and indirect interaction as a paradigm for multi-agent simulation seems only at first sight restricting. The framework that builds on modeling ant colonies has the potential to be also applied in other domains, not only in the simulation of other social insects. Focusing on behavior we could create a framework for describing general agent behavior in a potentially interesting environment. Integrating an interpreter into a graphical modeling and simulation environment a tool is created that also domain experts without knowledge in traditional programming can implement their models and experiment with them on their own.",
               "The main problem with the framework and maybe with multi-agent simulation in general is that new tools -independently from how accessible simulation as a scientific method becomes -do not replace modeling and experimentation experience and knowledge about the original system. Calibration and Validation are important issues; even more, when evolutionary processes are incorporated. The modeler must take of the parameters and assumptions in his model -they are hiding both, frame and goal of the evolution by providing the structures for learning and the criteria for fitness assignments. However, without appropriate tools a modeler will not arrive at the point where these questions are relevant. With SeSAm we came a step further providing a tool for evolutionary multi-agent simulations, but many questions concerning the methods of evolutionary multi-agent modeling are still open."
          ],
          "paper_id": "23c0f7f0-97d4-11e8-9580-1f0eb29018a9",
          "paragraphNo": 14,
          "fromPaper": "Simulated Ant Colonies as a Framework for Evolutionary Models"
     }
]